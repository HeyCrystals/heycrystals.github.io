<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-10-14T19:29:39+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">八一菜刀</title><subtitle>八一菜刀的个人博客</subtitle><author><name>肖玉民</name></author><entry><title type="html">Knife4jInsight平台版-MVP版本v1.0.0发布</title><link href="http://localhost:4000/2023/09/18/knife4j-insight-mvp/" rel="alternate" type="text/html" title="Knife4jInsight平台版-MVP版本v1.0.0发布" /><published>2023-09-18T00:00:00+08:00</published><updated>2023-09-18T00:00:00+08:00</updated><id>http://localhost:4000/2023/09/18/knife4j-insight-mvp</id><content type="html" xml:base="http://localhost:4000/2023/09/18/knife4j-insight-mvp/">&lt;p&gt;在之前发布的《Knife4j新产品的想法》一文中，我提到想给Knife4j的生态做一些扩展，区别于目前市面上不一样的功能或者工具产品。&lt;/p&gt;

&lt;p&gt;主要还是聚焦在Knife4j这个开源项目上，然后将自己的一些想法进行输出,并将一些在单体工具组件中无法解决落地的需求场景，共同灌注在这个新的产品中。&lt;/p&gt;

&lt;p&gt;今天,Knife4jInsight平台版-MVP(Minimum Viable Product)最小可行性版本v1.0.0终于来了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Knife4jInsight是简单、方便的OpenAPI接口规范文档聚合开放平台！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;产品地址：&lt;a href=&quot;http://knife4j.net&quot;&gt;http://knife4j.net&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;在很多年前，我的工作中的老大哥卢员外(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;微信公众号:土猛的员外&lt;/code&gt;)，那时候我们经常讨论如何创造产品、一个公司的产品及商业模式要如何保持市场竞争力，多年过去了,令我印象最深刻的就是&lt;strong&gt;三级火箭理论&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;第一级火箭:&lt;/strong&gt;提供基本产品或服务，搭建高频头部流量&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第二级火箭:&lt;/strong&gt;沉淀用户的商业场景，吸引更多用户和收入；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;第三级火箭:&lt;/strong&gt;完成商业闭环，创造更多价值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以360的产品三级火箭为例：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;360的第一级火箭是免费杀毒工具。它利用这级火箭打破了持续10年的杀毒软件市场三国鼎立的局面，成为用户量最大的安全工具&lt;/p&gt;

  &lt;p&gt;360的第二级火箭是从免费杀毒工具变为安全网络平台，进而推出360安全浏览器和360安全网址导航&lt;/p&gt;

  &lt;p&gt;360的第三级火箭就是它最终承载的商业闭环，从安全浏览器和网址导航的广告收入，获得企业的经营利润&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在迄今为止,我给Knife4j造了一些生态组件，主要如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ Knife4j：开源ui库,区别于官方swagger-ui组件，根据OpenAPI规范，重写ui交互，开发者在文档预览及调试时可以拥有不同的文档体验&lt;/li&gt;
  &lt;li&gt;✅ Knife4j-aggregation: 基于Servlet体系下的聚合组件,打通众多注册中心实现聚合&lt;/li&gt;
  &lt;li&gt;✅ knife4j-gateway：基于Spring Cloud Gateway网关组件下的聚合组件，开发者在网关组件下聚合微服务OpenAPI接口只需要简单的4行配置即可完成聚合，为开发者提供文档聚合能力的同时，也有效降低了开发者的学习成本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;将三级火箭理论应用到开源项目Knife4j上面，到今天为止，我觉得算是勉强完成了第一级别的火箭路程，我也希望能够将这个项目一直维护下去,按照这个产品理论去执行,算是一种人生经历。而Knife4jInsight平台版本的诞生，我觉得是时候去落地一些商业化的场景了&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我不确定现在三级火箭理论是否已经过时，但创造更好的产品一直是每个技术人应该追求的目标&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果将开源项目Knife4j比做一次创业,那这正是一次践行实战之旅，做商业化的场景需求落地，从这个产品本身而言我觉得有几个好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;产品本身是来源于社区,Knife4jInsight和开源Knife4j组件并不冲突，一个是单体组件,一个是平台,职责会有所不同&lt;/li&gt;
  &lt;li&gt;来自商业化产品的挑战,付费用户驱动者产品的迭代更新,提供更好的产品功能和服务&lt;/li&gt;
  &lt;li&gt;商业化产品的更新迭代以及开源项目同驱动项目的发展,在哪怕得到一小部分资金收入的保障,对于开源作者也是一种宝贵财富,避免项目停更烂尾&lt;/li&gt;
  &lt;li&gt;个人想法的践行与市场的融合,是挑战，令人兴奋&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;产品定位&quot;&gt;产品定位&lt;/h2&gt;

&lt;p&gt;该产品主要功能定位：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;🌱 基于开源项目&lt;strong&gt;&lt;a href=&quot;https://github.com/xiaoymin/knife4j&quot;&gt;Knife4j&lt;/a&gt;&lt;/strong&gt;而来，整合开源单体组件中无法解决的企业级需求场景&lt;/li&gt;
  &lt;li&gt;🔒 聚焦&lt;strong&gt;Swagger2&lt;/strong&gt;、&lt;strong&gt;OpenAPI3&lt;/strong&gt;、&lt;strong&gt;AsyncAPI&lt;/strong&gt;等接口规范的&lt;strong&gt;文档展示&lt;/strong&gt;和&lt;strong&gt;调试&lt;/strong&gt;功能&lt;/li&gt;
  &lt;li&gt;🏝️ 提供OpenAPI规范接口文档的存档、历史版本、预览、调试、导出、鉴权等一系列功能操作&lt;/li&gt;
  &lt;li&gt;🏝️ 为开发者提供统一的OpenAPI接口文档开放、预览、调试服务，开箱即用&lt;/li&gt;
  &lt;li&gt;⛺ 未来，我们是：&lt;strong&gt;统一OpenAPI接口开放平台&lt;/strong&gt;、&lt;strong&gt;统一OpenAPI接口文档管理平台&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;产品名称&quot;&gt;产品名称&lt;/h2&gt;

&lt;p&gt;给产品取名是一件令人头痛的事情，从目前的功能定位来看，可能将该产品命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4jCloud&lt;/code&gt;可能更合适一些，cloud意为云数据中心，将Knife4j界面功能提供的数据整合到云上，进行统一处理。&lt;/p&gt;

&lt;p&gt;但我还是更钟意&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4jInsight&lt;/code&gt;，主要有几层含义：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语意上,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Insight&lt;/code&gt;有洞察之意,对于聚焦在API接口领域而言，提供对OpenAPI接口的全方位洞察、了解&lt;/li&gt;
  &lt;li&gt;不仅仅只是将OpenAPI接口进行云上数据聚合,区别于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cloud&lt;/code&gt;，这为以后产品的新功能扩展迭代奠定基调&lt;/li&gt;
  &lt;li&gt;作为OpenAPI接口的平台,平台的职责需要把OpenAPI接口内容讲清楚,说明白&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;哪怕目前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4jInsight&lt;/code&gt;还没有达到产品名所定位的寓意高度,但也这驱使我们努力向前,为客户创造更有价值的功能。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;技术架构&quot;&gt;技术架构&lt;/h2&gt;

&lt;p&gt;技术架构图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://knife4j.net/assets/knife4jInsight-2.df80b220.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;技术架构平台的定位是开放平台和接口文档管理平台进行职责区分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;OpenAPI接口开放平台&lt;/strong&gt;：对于开放平台的接口路由，统一通过Apache APIXIS实现服务的鉴权及下游服务的转发&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OpenAPI接口文档平台&lt;/strong&gt;：对于OpenAPI接口文档的预览、调试，则由平台进行统一处理，提供基于开源项目Knife4j的文档展示方案&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Knife4jInsight的前期，我们着重先把&lt;strong&gt;OpenAPI接口文档平台&lt;/strong&gt;的功能做好，因为产品依靠开源项目&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4j&lt;/code&gt;起家,这是该产品的本职工作.&lt;/p&gt;

&lt;h2 id=&quot;功能架构&quot;&gt;功能架构&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;在功能架构中，我们加入了一些未来产品要加入的功能,虽然目前MVP版本并未实现,但会在迭代Knife4j开源版本的同时,保持对该版本的升级迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;功能架构图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://knife4j.net/assets/knife4jInsight-1.54221d51.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在功能上，主要是三大块的功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;开放文档的统一管理&lt;/strong&gt;：借助于Knife4j的前端界面，接口文档完全遵循Swagger2/OpenAPI3规范，下游或者外游服务的接口文档，只需要是符合规范的，都可以统一在平台进行管理维护，并提供文档最基础的预览、调试、鉴权访问等功能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;开发密钥统一管理&lt;/strong&gt;：开发者开放的API接口，很多时候，如果要对外的情况下，通常开发者们都需要实现接口的鉴权控制逻辑，而如果每个服务或不同的项目都实现一遍，那太耗费精力了，对于聚合上来的接口文档，所对应的下游服务，都可以通过该平台进行统一的管理，分配鉴权及管理开放用户&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;下游服务统一管理&lt;/strong&gt;：一旦涉及到开放平台，那么网关的企业级别高性能要求不可避免，这不是Knife4j的强项，作为开放平台网关层，这里考虑Apache APISIX来实现服务的分发，依靠Apache APISIX提供的Admin API接口，平台通过将下游服务的转发规则进行动态注册，这样接口文档和开放平台就从功能职责上进行了区分，互相存在依赖关系，但职责分工不同&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;平台的网关鉴权，通过实现&lt;strong&gt;Apache APIXIS&lt;/strong&gt;的鉴权插件，植入到网关组件中，此时所有开放平台的网关入口流量，都会通过该插件与Knife4jInsight中的开发密钥进行联动，实现接口的鉴权。&lt;/p&gt;

&lt;h2 id=&quot;产品定价&quot;&gt;产品定价&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4jInsight&lt;/code&gt;版本是商业化产品,但是我想既然面对的主要群体都是开发者,虽然是平台，但也更多的是工具,为开发者提供方便的工具&lt;/p&gt;

&lt;p&gt;也思考了良久，最终产品价格定价在&lt;strong&gt;49.9&lt;/strong&gt;元，主要是软件license的价格&lt;/p&gt;

&lt;p&gt;主要体现在：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在目前Knife4jInsight在线版本中，可以在线体验，付费后不限Namespace、ApiRegister的数量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;以Docker镜像提供交付,开发者可以将该版本独立部署在私有环境,保证企业数据安全&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;购买的License是永久期限使用,没有时间限制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;License限定部署域名(最大支持5个域名/ip授权)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;License限定平台更新周期,平台免费更新期限1年&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;即自购买该license后，Knife4jInsight在之后1年内的任何版本更新，都可以使用该license进行免费更新,超过期限后的新版本,则需要重新购买license&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;技术支持、技术咨询、开源社区issue、开发交流群&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;有任何技术问题可通过社区issue、交流群找到作者进行沟通反馈，或者通过邮箱:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xiaoymin@foxmail.com&lt;/code&gt;与作者取得联系&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knife4jInsight提供了在线版本，域名：https://console.knife4j.net&lt;/p&gt;

&lt;p&gt;开发者可以在线试用,及完成license的购买行为&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;目前是Knife4jInsight的MVP版本，该产品还在发展中，我给该产品规划了roadmap，主要如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果您有好的想法或者建议，可以通过在开源项目&lt;a href=&quot;https://github.com/xiaoymin/knife4j&quot;&gt;Knife4j&lt;/a&gt;中提&lt;a href=&quot;https://github.com/xiaoymin/knife4j/issues&quot;&gt;issues&lt;/a&gt;或者&lt;a href=&quot;https://github.com/xiaoymin/knife4j/discussions&quot;&gt;discussions&lt;/a&gt;进行反馈&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;功能&lt;/th&gt;
      &lt;th&gt;进度&lt;/th&gt;
      &lt;th&gt;发布日期&lt;/th&gt;
      &lt;th&gt;发布版本&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;平台管理OpenAPI数据源接口文档自动i18n,支持中英双语&lt;/td&gt;
      &lt;td&gt;待开发&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;微服务OpenAPI规范数据源自动注册上报&lt;/td&gt;
      &lt;td&gt;待开发&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;整合开源swagger-ui组件，平台中可进行OpenAPI规范接口设计&lt;/td&gt;
      &lt;td&gt;待开发&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;打通开源注册中心(Nacos\Eureka\Consul等等),获取服务中的OpenAPI数据源&lt;/td&gt;
      &lt;td&gt;待开发&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;产品首页：http://knife4j.net&lt;/p&gt;

&lt;p&gt;产品试用：https://console.knife4j.net&lt;/p&gt;

&lt;p&gt;期待Knife4j和Knife4jInsight齐头并进,创造更好的产品服务！！！&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4jInsight" /><summary type="html">在之前发布的《Knife4j新产品的想法》一文中，我提到想给Knife4j的生态做一些扩展，区别于目前市面上不一样的功能或者工具产品。</summary></entry><entry><title type="html">Knife4jInsight的产品开发历程</title><link href="http://localhost:4000/2023/09/17/knife4j-insight-dev/" rel="alternate" type="text/html" title="Knife4jInsight的产品开发历程" /><published>2023-09-17T00:00:00+08:00</published><updated>2023-09-17T00:00:00+08:00</updated><id>http://localhost:4000/2023/09/17/knife4j-insight-dev</id><content type="html" xml:base="http://localhost:4000/2023/09/17/knife4j-insight-dev/">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;大家好，在昨天Knife4jInsight的1.0.0MVP版本发布之后，在Knife4j的交流群分享说，希望Knife4j后面的版本，不管是开源版本还是商业版本，希望以：&lt;strong&gt;开源项目生态&lt;/strong&gt;+&lt;strong&gt;付费产品闭源&lt;/strong&gt;+&lt;strong&gt;Build On Public&lt;/strong&gt;的模式一直走下去！！！&lt;/p&gt;

&lt;p&gt;今天这篇则是践行&lt;strong&gt;Build On Public&lt;/strong&gt;策略，分享在开发Knife4jInsight过程中的一些感悟及想法！&lt;/p&gt;

&lt;p&gt;在很早之前分享的Knife4j5.0规划里面，我提到希望重写Knife4j的前端实现，并且能够将工具事项一直发展先去，把Knife4j始终定为一个工具组件，提供一些让开发者在日常文档开发过程中方便使用的功能为先。&lt;/p&gt;

&lt;p&gt;而在大概2个月前，我在交流群时常会碰到很多人在问Knife4jInsight开源版本的问题，在之前Knife4jInsight开源版本中，我主要实现了讲各个注册中心进行集成，所有的数据源存储在本地磁盘或者Nacos配置中心作为数据源来存储。我个人认为在思路上是没有什么问题的，但是在产品的使用上，程序员思维太验证了，没有提供一个可操作的界面供用户操作使用，提了一些概念，对用户使用来说，现在回想起来简直是灾难。基于这个想法，加上后面对希望Knife4j改版的热情，就产生了将开源版本Knife4jInsight转换为付费版本的想法。&lt;/p&gt;

&lt;p&gt;主要考虑一下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;降低之前开源版本Knife4jInsight的使用难度，提供可操作的可视化界面，简化流程和概念&lt;/li&gt;
  &lt;li&gt;将开源版本中一些无法实现的企业需求都灌注在这个平台版本中进行实现,毕竟这是一个独立运行的平台，可以很好的整合各种业务需求，而Knife4j开源版本是单体组件,碰到很多有意思的需求时,往往会存在瓶颈&lt;/li&gt;
  &lt;li&gt;商业产品和开源版本共同驱动的模式,开源产品能很好的吸收用户的反馈声音以增强改进软件迭代发展,而商业产品能保证Knife4j这个开源作品使作者获取一些微薄的收入,投入更多的时间去维护项目的开发，我觉得是一种正相关的开发模式，毕竟我们见过太多靠爱发电的开源项目最终都停更了，Knife4j目前也基本是靠爱发电的项目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;确定了想法之后，说干就干，最终在Xmind大致罗列了下这个产品最终的具体事项，主要4个方面，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-insight-dev/image-20230920063409469.png&quot; alt=&quot;image-20230920063409469&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;系统用户&lt;/strong&gt;：平台既然以OpenAPI规范数据源管理为主，而OpenAPI规范是企业的数字资产,那么用户功能必然必不可少,接口文档是企业的隐私,需要用户权限来限定谁可以访问,谁不可以访问&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;平台特性&lt;/strong&gt;：主要是确定平台的特点及功能风格&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;主要功能&lt;/strong&gt;：确定确定MVP版本的基础功能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;进度计划&lt;/strong&gt;：开发迭代这个产品需要确定的计划事项&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统用户&quot;&gt;系统用户&lt;/h2&gt;

&lt;p&gt;平台以OpenAPI规范数据源管理为主，而OpenAPI规范是企业的数字资产,那么用户功能必然必不可少,接口文档是企业的隐私,需要用户权限来限定谁可以访问,谁不可以访问。&lt;/p&gt;

&lt;p&gt;在用户层面，以用户和角色进行展开：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;用户&lt;/strong&gt;：平台使用者，可以注册(基于Email)使用的用户,登录后可以维护OpenAPI规范数据源&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;角色&lt;/strong&gt;：平台主要分两个角色(平台用户、管理员)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;平台用户&lt;/strong&gt;：角色是平台的最小可用角色，仅可以使用平台&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;管理者&lt;/strong&gt;：则可以对用户进行统一管理，在标准版中，会分配1个默认管理者账号，管理者对用户进行创建、禁用、重置密码等操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;平台特性&quot;&gt;平台特性&lt;/h2&gt;

&lt;p&gt;平台特性主要是确定平台等风格，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-insight-dev/image-20230920064851083.png&quot; alt=&quot;image-20230920064851083&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;界面排版&lt;/strong&gt;：习惯了所有菜单风格的我，这次决定使用一下上下风格的模式&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;文档访问&lt;/strong&gt;：对于文档的访问，可以开放鉴权功能，对于需求鉴权的文档，用户访问时则需要校验登录，否则不予访问&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据隔离&lt;/strong&gt;：每个用户的数据都是相互之间隔离的，只能看到自己的数据&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;主要功能&quot;&gt;主要功能&lt;/h2&gt;

&lt;p&gt;主要功能则是在开发MVP版本期间确定的功能以及想到的后期一些扩张功能，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-insight-dev/image-20230920065131593.png&quot; alt=&quot;image-20230920065131593&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NameSpache(命名空间)&lt;/strong&gt;：命名空间是平台中抽象的概念,一个namespace下可以允许存在多个OpenAPI规范实例，用户可以讲该功能理解为企业、项目、部门、产品等等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ApiRegister(OpenAPI规范数据源):&lt;/strong&gt;服务实例是一个OpenAPI规范的最小单元,讲OpenAPI接口规范数据源通过自动注册或手动填报的方式,保存在平台中后即可进行接口文档的在线预览功能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;用户中心：&lt;/strong&gt;平台用户可以参与OpenAPI文档的建设及授权,用户数据之间完全隔离&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;授权中心&lt;/strong&gt;：Knife4jInsight在线版本的功能，对用户购买后的license授权及查看等操作&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;登录/注册&lt;/strong&gt;：在线版本保持了基于邮箱账号的注册/找回密码等功能，而在私有化标准版本中，用户的注册等操作没有，需要管理员账号进行开户操作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于二期功能，则是在开发过程中想到的一些功能点，在xmind中记录，后来我把这些功能又单独在项目的官网文档上进行了维护，主要是产品的RoadMap&lt;/p&gt;

&lt;p&gt;官网功能RoadMap地址：http://knife4j.net/roadmap/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-insight-dev/image-20230920065636597.png&quot; alt=&quot;image-20230920065636597&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后期的功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;平台管理OpenAPI数据源接口文档自动i18n,支持中英双语&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于注册上来的OpenAPI数据源,平台基于开放的翻译API接口对OpenAPI结构进行解析，解析完成后自动翻译文档注释说明，这样我觉得企业开发者在做i18n文档国际化时，在代码层面只需要按常规的固定流程开发即可,而无需从代码框架层面实现i18n，整合i18n功能到平台中可以不止做一种语言，后面扩展更多的语言支持也是及其方便的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;微服务OpenAPI规范数据源自动注册上报&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;目前MVP版本还是手动上报填写，但平台已经预留了接口自动上报的函数接口，基于用户的开发密钥，将自动上报功能整合到Knife4j开源的各项starter组件中，开箱即用，即可在项目启动后自动上报OpenAPI规范数据至Insight平台中，这样即可避免各种404、鉴权等集成Knife4j组件的问题，开发者只需要将Insight平台中的文档提供出去即可进行接口对接&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;整合开源swagger-ui组件，平台中可进行OpenAPI规范接口设计&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;开源Swagger-editor组件提供了在线设计接口及所见即所得的能力，整合后可以先设计规范接口，后实现代码，后期还可以考虑整合OpenAPI规范生态的代码生成功能,在线提供各种导出、代码生成等功能&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;打通开源注册中心(Nacos\Eureka\Consul等等),获取服务中的OpenAPI数据源&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;微服务开发是目前当下主流的开发技术栈，而打通各个注册中心则可以在平台端主动去pull拉取各个子服务的OpenAPI数据源，对于手工填写OpenAPI规范管理提供了便利，和&lt;u&gt;微服务OpenAPI规范数据源自动注册上报&lt;/u&gt;功能相比，一个是主动pull拉取，而另外一个则是被动推送到Insight平台，是两种策略&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;进度计划&quot;&gt;进度计划&lt;/h2&gt;

&lt;p&gt;确定好了功能，那么就是计划排期了&lt;/p&gt;

&lt;h3 id=&quot;计划排期&quot;&gt;计划排期&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-insight-dev/image-20230920070738423.png&quot; alt=&quot;image-20230920070738423&quot; /&gt;&lt;/p&gt;

&lt;p&gt;开发一个产品要做的事情针对太多了，首先是确定MVP版本的开发周期&lt;/p&gt;

&lt;p&gt;因为作者也是在职，所以不可能全职参与这项工作,只能是利用下班后或周六周日的时间来进行开发，MVP版本也是保证产品的最小可用版本，所以计划的是花1-2个月的时间来完成&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下是GitHub的提交记录，大概从7月份开始有想法之后，开源和产品的迭代基本上是每天一有空闲则进行代码的提交&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-insight-dev/image-20230920070951980.png&quot; alt=&quot;image-20230920070951980&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;上线准备&quot;&gt;上线准备&lt;/h3&gt;

&lt;p&gt;当项目功能开发完成后，需要做一些上线准备的事情，这里面主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;云服务器：既然有在线试用版本，那么云服务器是跑不了的,在开发技术选型阶段，所有的功能都是以单体架构进行技术选型，后面我会把平台的技术选型分享出来，主要是避免大量中间件的使用，节省资源成本。在云服务器成本上主要是两个：
    &lt;ul&gt;
      &lt;li&gt;ECS：购买了阿里云的ECS服务器，张家口的节点，2c4GB配置，带宽4M&lt;/li&gt;
      &lt;li&gt;RDS：购买的是腾讯云的MySQL，配置1c1gb，20gb存储，三年648&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;官网域名：既然是商业化产品,官网域名跑步了，干脆就以开源项目Knife4j进行命名，最后发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.com&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cn&lt;/code&gt;的域名都已经被人注册了😂，最后发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j.net&lt;/code&gt;的域名还在，那就自己注册了吧，85RMB/年，net的域名比&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;com&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cn&lt;/code&gt;略贵一些，购买域名之后，就是域名备案了，前后大概花了半个月左右吧，备案真的周期太长了&lt;/li&gt;
  &lt;li&gt;官网文档：有产品、有域名，最后就是写文档了，考虑到我也非专业前端人员，写css不是我的强项，我只会写markdown，那就市面上选一个markdown的文档生成产品吧，主要参考有很多，我之前都用过，包括&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docusaurus&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vuePress&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VitePress&lt;/code&gt;,最终被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VitePress&lt;/code&gt;的界面风格吸引，加上是新的，所以就选择用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vitepress&lt;/code&gt;来写官网文档了，文档编写前后大概花了一周的时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;运营推广&quot;&gt;运营推广&lt;/h3&gt;

&lt;p&gt;开发好了，也上线了，就考虑推广的事情了，另外也要考虑产品的定价&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;产品定价：&lt;/strong&gt;对于产品的定价，既然是工具组件为主,我所期望的是还是更平民一些，更高的价格则代表着更高的要求和产品价值,Knife4jInsight是一个初次尝试的商业化产品，我觉得获得市场认同感很重要，毕竟商业版我更多的想法也是想驱动开源Knife4j版本的迭代更新，是开源版本Knife4j的补充，企业需求的能量池，更多的算是一种开源变现的手段吧，就定价在49.9/年&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;产品license&lt;/strong&gt;：license是软件启动时所需要的,在思考license职责过程中，我也思考了很多，比如使用期限、边界、产品交付物等等方面，最终思考如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;购买的License是永久期限使用,没有时间限制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;License限定部署域名(最大支持5个域名/ip授权),避免license传播泛滥&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;License限定平台更新周期,平台免费更新期限1年&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;即自购买该license后，Knife4jInsight在之后1年内的任何版本更新，都可以使用该license进行免费更新,超过期限后的新版本,则需要重新购买license&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;运营推广：&lt;/strong&gt;之后产品上线后就是运营推广了，我觉得这是一个长期的事情，在保持对产品的持续迭代输出之余，通过公众号或者官网文档、技术交流群等，都可以进行推文，写文章也算是一种锻炼，而践行&lt;strong&gt;Build On Public&lt;/strong&gt;历程我觉得对于我自己来说也是一种不同的开发体验，即使是在开源项目中。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;公众号的推广包括对平台的介绍、功能介绍，这个在后期的开发迭代阶段会一一分享&lt;/li&gt;
  &lt;li&gt;开发历程、自己的思考及产品的价值&lt;/li&gt;
  &lt;li&gt;技术的选型，每个功能的想法及价值思考&lt;/li&gt;
  &lt;li&gt;等等很多方面的内容都可以一一写出来&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;Knife4j并不完美,期待Knife4j及Knife4jInsight与用户一起共同成长见证～～～&lt;/p&gt;

&lt;p&gt;官网地址：&lt;a href=&quot;http://knife4j.net/&quot;&gt;http://knife4j.net/&lt;/a&gt;&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4jInsight" /><summary type="html">前言</summary></entry><entry><title type="html">Knife4j新产品的想法</title><link href="http://localhost:4000/2023/09/15/knife4j-new-product/" rel="alternate" type="text/html" title="Knife4j新产品的想法" /><published>2023-09-15T00:00:00+08:00</published><updated>2023-09-15T00:00:00+08:00</updated><id>http://localhost:4000/2023/09/15/knife4j-new-product</id><content type="html" xml:base="http://localhost:4000/2023/09/15/knife4j-new-product/">&lt;h2 id=&quot;写在开头&quot;&gt;写在开头&lt;/h2&gt;

&lt;p&gt;Knife4j的发展已经有好几个年头了，最近想来，虽然这个小组件不太稳定，但有每天依然收到很多小伙伴的积极反馈，这让我又不由自主的对这个项目产生了羁绊。一直以来，总想把一些工作中的想法，以及和Knife4j周边生态相关的内容结合起来，做一些不一样的事情。&lt;/p&gt;

&lt;p&gt;在Knife4j目前的生态中，我主要为Knife4j写了一些技术的组件，主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Knife4j-ui：前端组件部分，主要基于Swagger2/OpenAPI3规范的识别，通过不同的展现及交互，为开发者提供不同的体验&lt;/li&gt;
  &lt;li&gt;knife4j-aggregation:前期基于Servlet生态体系下的聚合组件，解决在Spring Cloud Gateway等异步编码较困难的人文档聚合问题，打通各个注册中心组件(Nacos\Eureka\Consul等)实现接口文档的聚合&lt;/li&gt;
  &lt;li&gt;knife4j-gateway：Spring Cloud Gateway网关下的聚合组件，4行配置搞定网关下的接口文档聚合&lt;/li&gt;
  &lt;li&gt;Knife4j-extension:基于Chrome浏览器的调试插件，只要是Swagger2/OpenAPI规范，就可以预览文档/调试文档，为了上架还开通了vista卡，付费给Google5美元，现在下架了(长时间没更新代码有漏洞被迫下架)😂。。。&lt;/li&gt;
  &lt;li&gt;knife4j-insight：独立运行的聚合中间件，将硬盘/Nacos等作为Swagger2/OpenAPI3规范的数据源，复用aggregation的生态，聚合各个注册中心，实现平台化，聚合所有接口规范，统一预览/调试。。更新了3个版本(我觉得自己思路挺好的)。。😂&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;新想法&quot;&gt;新想法&lt;/h2&gt;

&lt;p&gt;最近这段时间，主要思考的是Knife4j这个项目应该如何发展下去，如果做新产品，与市面上已经存在的其他产品如何做差异化的竞争。&lt;/p&gt;

&lt;p&gt;思来想去，我又有了新的方向和目标～！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;折腾新产品的心态一直没停过。。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;市面上的产品包括&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Postman&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apifox&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Apipost&lt;/code&gt;等等，专注在自己的领域里面，覆盖面都挺广的，而Knife4j好像以Ui界面交互起家，受众要宅一些，想想这些产品的词云关键字：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API文档&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;调试&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;协作&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;测试&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API设计&lt;/code&gt;等等&lt;/p&gt;

&lt;p&gt;每一个关键字里面所需要投入的精力，都是Knife4j无法企及的，而且我在很早之前分享Knife4j的定位时，我一直想把他作为一个工具输出，单纯的工具，因此，包括：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;协作&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;涉及&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;自动化&lt;/code&gt;等等标签，都不适合我&lt;/p&gt;

&lt;p&gt;那么，应该做什么？做一点不一样的呢？&lt;/p&gt;

&lt;p&gt;Knife4jInsight这个产品的思路我自认为还是得发展下去,只不过需要更加产品化一下，做成平台，给用户提供更方便的可操作化的界面，简化整个使用步骤。&lt;/p&gt;

&lt;p&gt;基于这个想法，和脑子里蹦出了一些新的Idea，包括：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;开放平台&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;接口展示&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LLM大模型&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;我有了一个产品的大致雏形，我画了一个草图，大概是这个样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/Knife4jInsight.png&quot; alt=&quot;图1.产品架构图&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在上图中，Knife4jInsight是一个独立服务组件，依附在Apache APISIX网关组件下的服务。那么，产品定位是什么呢？&lt;/p&gt;

&lt;p&gt;产品定位：&lt;strong&gt;统一的通用接口文档及开放平台服务系统&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在功能上，主要是三大块的功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;开放文档的统一管理&lt;/strong&gt;：借助于Knife4j的前端界面，接口文档完全遵循Swagger2/OpenAPI3规范，下游或者外游服务的接口文档，只需要是符合规范的，都可以统一在平台进行管理维护，并提供文档最基础的预览、调试、鉴权访问等功能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;开发密钥统一管理：&lt;/strong&gt;开发者开放的API接口，很多时候，如果要对外的情况下，通常开发者们都需要实现接口的鉴权控制逻辑，而如果每个服务或不同的项目都实现一遍，那太耗费精力了，那么我觉得只要是聚合上来的接口文档，所对应的下游服务，都可以通过该平台进行统一的管理，分配鉴权及管理开放用户&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;下游服务统一管理：&lt;/strong&gt;一旦涉及到开放平台，那么网关的企业级别高性能要求不可避免，这不是Knife4j的强项，作者也没这个能力，作为开放平台网关层，这里考虑Apache APISIX来实现服务的分发，依靠Apache APISIX提供的Admin API接口，平台通过将下游服务的转发规则进行动态注册，这样接口文档和开放平台就从功能职责上进行了区分，互相存在依赖关系，但职责分工不同&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;平台的网关鉴权，通过实现Apache APIXIS的鉴权插件，植入到网关组件中，此时所有开放平台的网关入口流量，都会通过该插件与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4jInsight&lt;/code&gt;中的开发密钥进行联动，实现接口的鉴权。&lt;/p&gt;

&lt;h3 id=&quot;开放文档的统一管理&quot;&gt;开放文档的统一管理&lt;/h3&gt;

&lt;p&gt;先来看开放文档的统一管理，考虑到我们要与开源Knife4j项目共同发展，因此产品的功能上，也是以开源Knife4j为主，接口文档完全遵循Swagger2/OpenAPI3规范，在这个场景下，实现文档的统一管理和聚合&lt;/p&gt;

&lt;p&gt;主要包括两个功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Namespace&lt;/strong&gt;：命名空间(namespace)是平台中抽象的概念,一个namespace下可以允许存在多个OpenAPI规范实例，用户可以讲该功能理解为企业、项目、部门、产品等等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;ApiRegister&lt;/strong&gt;：服务实例(ApiRegister)是一个OpenAPI规范的最小单元,将OpenAPI接口规范数据源通过自动注册或手动填报的方式,保存在平台中后即可进行接口文档的在线预览功能，这样的好处是我们即可以对接口文档进行归档保存，又可以和下游服务联动，打通调试。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;文档用户中心&lt;/strong&gt;: 每一个namespace下的文档都是有鉴权属性的，用户可以选择对齐是否开放，这样的好处是保持接口的🔐安全，避免所有人都能访问&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;先来看下一界面原型。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;命名空间(namespace)&lt;/strong&gt;：namespace列表可以查看所有的项目列表，并且namespac是可以直接访问的，如果当前namespace下面有接口实例，那么就可以通过Knife4j的前端界面进行预览和调试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/namespace.jpg&quot; alt=&quot;图2.命名空间&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击namespaceId查看文档效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/namespace-show.jpg&quot; alt=&quot;图3.命名空间文档展示&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;服务实例(ApiRegister)&lt;/strong&gt;:是一个OpenAPI规范的最小单元,可以通过接口自动注册上来，也可以通过平台进行主动编辑添加&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;包括接口的规范类型，数据来源类型，注册类型等等信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/api.jpg&quot; alt=&quot;图4.接口实例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;明细信息展示如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/api-info.png&quot; alt=&quot;图5.接口实例文档展示&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样，当个APIRegister也是可以独立访问的，平台提供的单实例的访问方法：&lt;/p&gt;

&lt;h3 id=&quot;开发密钥统一管理&quot;&gt;&lt;strong&gt;开发密钥统一管理&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;开发者开放的API接口，很多时候，如果要对外的情况下，通常开发者们都需要实现接口的鉴权控制逻辑，而如果每个服务或不同的项目都实现一遍，那太耗费精力了，那么我觉得只要是聚合上来的接口文档，所对应的下游服务，都可以通过该平台进行统一的管理，分配鉴权及管理开放用户&lt;/p&gt;

&lt;h3 id=&quot;下游服务统一管理&quot;&gt;&lt;strong&gt;下游服务统一管理&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;一旦涉及到开放平台，那么网关的企业级别高性能要求不可避免，这不是Knife4j的强项，作者也没这个能力，作为开放平台网关层，这里考虑Apache APISIX来实现服务的分发，依靠Apache APISIX提供的Admin API接口，平台通过将下游服务的转发规则进行动态注册，这样接口文档和开放平台就从功能职责上进行了区分，互相存在依赖关系，但职责分工不同&lt;/p&gt;

&lt;h3 id=&quot;llm大模型结合&quot;&gt;LLM大模型结合&lt;/h3&gt;

&lt;p&gt;目前，AIGC火热发展的当下，大模型落地更多产品的场景，我觉得是不可避免的，而对于在Knife4jInsight平台中，我目前也想到了一些LLM大模型可以落地的场景，主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;接口的i18n转化：本身Knife4j提供的界面目前是支持中英文的，但是开发者如果要提供英文的接口文档描述，通常在项目开发阶段，或者定义OpenAPI接口规范时，技术层面就需要提供支持，而如果通过平台中大模型的翻译工具，基于Prompt工程，将OpenAPI数据源直接生成对应的目标语言，那么开发者就无需在技术启动接口考虑i18n的事情，Knife4jInsight平台中自动集成即可快速实现。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/llm1.png&quot; alt=&quot;图6.LLM大模型&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;代码模版：将Prompt工程+OpenAPI规范结合，植入到Knife4j到每一个功能点中，包括代码示例生成、curl等等不同的场景，调试LLM大模型的Prompt工程，将幂等性的接口输出到应用测，给予开发者更多的便利。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/images/blog/product-new-idea/llm2.png&quot; alt=&quot;图7.LLM大模型&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;结尾&quot;&gt;结尾&lt;/h2&gt;

&lt;p&gt;以上就是我的一些新想法，如果您对该产品感兴趣，欢迎和我联系(&lt;a href=&quot;mailto:xiaoymin@foxmail.com&quot;&gt;xiaoymin@foxmail.com&lt;/a&gt;)～～～&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4jInsight" /><summary type="html">写在开头</summary></entry><entry><title type="html">Spring Cloud Gateway网关下的文档聚合?就用它了</title><link href="http://localhost:4000/2023/08/13/knife4j-gateway-introduce/" rel="alternate" type="text/html" title="Spring Cloud Gateway网关下的文档聚合?就用它了" /><published>2023-08-13T00:00:00+08:00</published><updated>2023-08-13T00:00:00+08:00</updated><id>http://localhost:4000/2023/08/13/knife4j-gateway-introduce</id><content type="html" xml:base="http://localhost:4000/2023/08/13/knife4j-gateway-introduce/">&lt;p&gt;大家好，这篇文章主要是介绍分享Knife4j-gateway网关聚合文档组件,自4.0版本发布该组件后，得到了大家的积极响应，我们也是积极响应用户的需求，持续迭代优化&lt;/p&gt;

&lt;p&gt;该组件是一个非常轻量级的网关聚合组件，适用于开发者使用Spring Cloud Gateway网关组件进行Swagger2、OpenAPI3规范的文档聚合&lt;/p&gt;

&lt;h2 id=&quot;-1前言&quot;&gt;🌾 1.前言&lt;/h2&gt;

&lt;p&gt;在考虑写这个组件之前，开发者在Spring Cloud Gateway网关组件下进行聚合&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swagger2&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenAPI3&lt;/code&gt;可能存在各种各样的问题&lt;/p&gt;

&lt;p&gt;我认为主要包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;适配不同的Spring Cloud Gateway版本，没有形成统一稳定的技术解决方案&lt;/li&gt;
  &lt;li&gt;Gateway组件下Webflux异步编码的风格，学习成本异常陡峭，初学者一时之间难以掌握微服务体系&lt;/li&gt;
  &lt;li&gt;聚合文档代码强耦合业务代码，无法灵活配置&lt;/li&gt;
  &lt;li&gt;文档Ui无法随心所欲的配置&lt;/li&gt;
  &lt;li&gt;各种404或路径错误等问题&lt;/li&gt;
  &lt;li&gt;等等…..&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-2解决方案&quot;&gt;🔥 2.解决方案&lt;/h2&gt;

&lt;p&gt;我们从开发者的实际需求出发，结合Knife4j多年开源以来积累的宝贵经验，决定了我们需要开发一个Gateway网关下的聚合组件&lt;/p&gt;

&lt;p&gt;将开发者的需求、问题聚合在一起，众人拾薪火焰高，形成一个统一的技术解决方案&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/docs/middleware-sources/spring-cloud-gateway/spring-gateway-introduction&quot;&gt;knife4j-gateway&lt;/a&gt;组件就是在这样的场景下诞生的&lt;/p&gt;

&lt;p&gt;该组件主要的特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ &lt;strong&gt;使用简单(最低4行配置搞定聚合)，学习成本低&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;解耦Spring Cloud Gateway网关组件，聚焦文档聚合功能，职责单一&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;提供手动配置、微服务自动发现两种灵活配置方式聚合子服务文档&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;可以同时聚合Swagger2、OpenAPI3两种不同的规范&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;灵活配置聚合规则，自定义排除规则支持&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;微服务场景下支持服务的上线、下线场景，文档状态与子服务保持一致，无需重启服务&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-3深入了解&quot;&gt;🌚 3.深入了解&lt;/h2&gt;

&lt;p&gt;我们结合knife4j-gateway组件的特点来深入分析，带着疑惑来一步步揭开她的神秘面纱~！&lt;/p&gt;

&lt;h3 id=&quot;-31-使用简单最低4行配置搞定聚合学习成本低&quot;&gt;✅ &lt;strong&gt;3.1 使用简单(最低4行配置搞定聚合)，学习成本低&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;首先，我们既然都已经封装成组件了，那么学习和使用成本是我们首先就需要考虑的事情，需要把复杂，难处理的业务逻辑、技术细节，全部封装在组件里，而对于上层用户，我们提供简化后的配置，开发者只需要开箱即用即可&lt;/p&gt;

&lt;p&gt;这是组件的价值，剩下学习时间成本。&lt;/p&gt;

&lt;p&gt;当然我说使用简单(最低4行配置搞定聚合)，这只是有点宣传吹牛的口吻，对于开发者来说，我又要学习了解你这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;组件的四行配置，那也是学习成本啊&lt;/p&gt;

&lt;p&gt;这个我无从反驳~~~😂&lt;/p&gt;

&lt;p&gt;如果开发者的项目、产品采用Spring Cloud微服务体系，网关组件使用Spring Cloud Gateway，那么对于Swagger、OpenAPI3的文档聚合，采用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;组件的话，就可以使用组件的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover&lt;/code&gt;自动发现模式，实现自动聚合&lt;/p&gt;

&lt;p&gt;在项目中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;配置文件中进行如下配置，就搞定了，配置如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ① 第一个配置，开启gateway聚合组件&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ② 第二行配置，设置聚合模式采用discover服务发现的模式&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;discover&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ③ 第三行配置，开启discover模式&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ④ 第四行配置，聚合子服务全部为Swagger2规范的文档&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swagger2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们没有使用广告法禁止的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;最简单&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;非常简单&lt;/code&gt;等宣传口吻进行宣传&lt;/p&gt;

&lt;p&gt;摸着良心去看这个配置，用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disocver&lt;/code&gt;模式进行聚合，四行配置达到开发者的目的，&lt;strong&gt;确实&lt;/strong&gt;很方便啊，学习成本低~~~!&lt;/p&gt;

&lt;h3 id=&quot;-32-解耦spring-cloud-gateway网关组件聚焦文档聚合功能职责单一&quot;&gt;✅ 3.2 解耦Spring Cloud Gateway网关组件，聚焦文档聚合功能，职责单一&lt;/h3&gt;

&lt;p&gt;为什么我说解耦呢？因为文档功能其实是一个开发阶段的需求，是开发团队在配合完成项目、产品过程中，团队之前提升效率的一个潜在的需求场景&lt;/p&gt;

&lt;p&gt;当我们的项目、产品开发完成，上线到生产环境的时候，或者在不同的项目开发过程中，开发者的需求又涌现出来了，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;接口规范是非常重要的内部信息，生产环境应该屏蔽
    &lt;blockquote&gt;
      &lt;p&gt;请参考文章&lt;a href=&quot;/docs/blog/production-forbidden-ui&quot;&gt;生产环境如何屏蔽Knife4j、Swagger等Ui资源和接口&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;聚合代码在不同的项目中来回Copy&lt;/li&gt;
  &lt;li&gt;升级Gateway组件导致聚合代码失效，调试不同的Gateway版本，在线搜索解决方案&lt;/li&gt;
  &lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还有一些其他的需求场景，一线开发者可以自行脑补，上面说列的需求，你是否在开发场景中也碰到了呢？&lt;/p&gt;

&lt;p&gt;既然文档聚合功能和项目、产品本身并没有太大的关系，是开发者开发过程中提高效率的产物，那么对于统一的事情，我们应该避免重复操作，用独立的中间件来解决这些问题&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/docs/middleware-sources/spring-cloud-gateway/spring-gateway-introduction&quot;&gt;knife4j-gateway&lt;/a&gt;组件&lt;strong&gt;聚焦Swagger2/OpenAPI3规范的文档聚合&lt;/strong&gt;,一旦团队之间确定使用Swagger2/OpenAPI3规范，并且有聚合的需求场景，那么引入一个jar组件就能解决的事情，何乐而不为呢？&lt;/p&gt;

&lt;h3 id=&quot;-33-提供手动配置微服务自动发现两种灵活配置方式聚合子服务文档&quot;&gt;✅ &lt;strong&gt;3.3 提供手动配置、微服务自动发现两种灵活配置方式聚合子服务文档&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;上面我们从学习成本、解耦两个方面阐述了该组件的价值，那么接下来，当我们深入去探索网关组件的下的聚合场景时，站在中间件组件的立场下，我们就需要考虑不同的团队、不同的人员的需求进行兼容合并&lt;/p&gt;

&lt;p&gt;目前为之，结合开发任何及自身的实际工作经验，总结出了两种文档聚合的场景，供开发者进行使用&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;手动配置聚合(manual)&lt;/strong&gt;: 开发者手动配置，灵活配置展示文档
    &lt;ul&gt;
      &lt;li&gt;优点：使用简单、灵活，学习成本低.试错成本低&lt;/li&gt;
      &lt;li&gt;缺点：服务众多时较繁琐，无法感知子服务的上下线状态&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;服务发现自动聚合(discover)&lt;/strong&gt;：基于注册中心，主动聚合服务
    &lt;ul&gt;
      &lt;li&gt;优点：使用及配置简单、学习成本低.&lt;/li&gt;
      &lt;li&gt;缺点：暂时没想到，欢迎你来体验反馈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-34-可以同时聚合swagger2openapi3两种不同的规范&quot;&gt;✅ &lt;strong&gt;3.4 可以同时聚合Swagger2、OpenAPI3两种不同的规范&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;我们的项目/产品在长期迭代开发过程中，或者不同的团队配合开发中,有时候子服务的标准可能不尽统一。而我们需要一起聚合怎么办呢?&lt;/p&gt;

&lt;p&gt;好在在Knife4j的前端Ui组件已经完全适配了Swagger2和OpenAPI3规范，在网关层面，我们只需要根据该组件提供的手动配置策略配置上就解决了该问题，可参考下面的文章介绍。&lt;/p&gt;

&lt;h3 id=&quot;-35-灵活配置聚合规则自定义排除规则支持&quot;&gt;✅ &lt;strong&gt;3.5 灵活配置聚合规则，自定义排除规则支持&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;灵活配置是knife4j-gateway组件为网关聚合服务提供的带刀侍卫，保障开发者们在手动/服务发现两大场景下配合使用以达到最终目的&lt;/p&gt;

&lt;p&gt;他主要提供的服务包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设定网关层面聚合的排除规则，支持正则表达式或者开发者根据SPI接口自定义实现
    &lt;blockquote&gt;
      &lt;p&gt;例如有Dubbo服务的接口，需要在网关层面进行排除，禁止聚合&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;子服务的服务名称别名、展示顺序、接口顺序等配置自定义&lt;/li&gt;
  &lt;li&gt;子服务的自定义ContextPath自由灵活配置，满足业务需要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1、在网关层面，排除不需要的子服务时，我们可以基于正则表达式(自&lt;a href=&quot;/docs/changelog/x/4.3&quot;&gt;4.3.0版本&lt;/a&gt;进行支持)，配置如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;discover&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swagger2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 排除不需要聚合的子服务，基于正则表达式(支持多个)&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;excluded-services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 排除order开头的服务&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;order.*&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 排除服务中包含dubbo字样的服务&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.*?dubbo.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2、配置子服务的别名，排序，自定义配置如下：&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;discover&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swagger2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;excluded-services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;order.*&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 自定义配置子服务的别名，排序规则&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;service-config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;order-service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;group-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;订单服务&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;user-service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;group-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;用户服务&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3、网关成统一开启配置子服务的tag、operation排序规则&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;discover&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swagger2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 排序规则&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags-sorter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;operations-sorter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-4聚焦两大使用场景手动服务发现自动聚合&quot;&gt;🐐 4.聚焦两大使用场景(手动/服务发现自动)聚合&lt;/h2&gt;

&lt;h3 id=&quot;41-手动配置聚合manual&quot;&gt;&lt;strong&gt;4.1 手动配置聚合(manual)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;手动配置聚合，顾名思义,开发者需要自行写子服务的规则或者路径,这和微服务场景下自动复现聚合是形成互补机制，双剑合璧威力之下，完成最终成果输出&lt;/p&gt;

&lt;p&gt;该场景解决不同的问题，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子服务同时存在Swagger2/OpenAPI3规范的服务&lt;/li&gt;
  &lt;li&gt;子服务存在不同的package包分组的的规范实例，用过springfox或者springdoc的开发者应该清楚可以根据package包路径、path路由创建接口分组&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-gateway/knife4j-gateway-service.png&quot; alt=&quot;图1.Spring Gateway网关聚合文档流程示意图-手动配置&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个简单的示意图，我们有三个服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gateway-service:网关服务，负责网关路由鉴权、路由转发&lt;/li&gt;
  &lt;li&gt;order-service:子服务之一，基于OpenAPI3规范暴露规范地址:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v3/api-docs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;user-service: 子服务之一，基于Swagger2规范暴露规范地址：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/v2/api-docs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们从服务架构流程图中了解到了我们需要的信息，那么在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gateway-service&lt;/code&gt;组件中，就可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;组件提供的手动配置聚合，将文档进行聚合展示&lt;/p&gt;

&lt;p&gt;简单的配置如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 选择手动&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manual&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;用户服务&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;service-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user-service&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/user/v2/api-docs&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;订单服务&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;service-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;order-service&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/order/v3/api-docs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;42-服务发现自动聚合discover&quot;&gt;&lt;strong&gt;4.2 服务发现自动聚合(discover)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;手动聚合的唯一问题就是，一旦我们的产品/项目，子服务数量众多，纯靠手动去配，那对于开发者来说也是极其痛苦的，就好像是侮辱开发者一样。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我都能写代码了，你还让我写这么多繁杂的配置，那是对程序员的不尊重。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基于服务发现自动聚合的需求场景，就由此诞生.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在上面我们介绍knife4j-gateway特点时，我们提到该组件解耦，聚焦文档聚合功能，职责单一，这里得以体现&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于服务发现场景下的自动聚合，配置就更简单了，但对我们也有一些小小的约束&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;⚠️ 我们的子服务规范实现需要统一，要么全部用Swagger2规范，或者OpenAPI3规范&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;配置如下：&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ① 第一个配置，开启gateway聚合组件&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ② 第二行配置，设置聚合模式采用discover服务发现的模式&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;discover&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ③ 第三行配置，开启discover模式&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ④ 第四行配置，聚合子服务全部为Swagger2规范的文档&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swagger2&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个特点和我们前面提到的使用简答这一条又对上了，真的只有三四行配置。&lt;/p&gt;

&lt;p&gt;但是在微服务聚合场景下，我们虽然封装内部实现，也有必要和大家分享一下，具体的处理规则原理&lt;/p&gt;

&lt;p&gt;先来看一张简单的架构图-服务发现的场景，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/knife4j-gateway/knife4j-gateway-service3.png&quot; alt=&quot;图2.Spring Gateway网关聚合文档流程示意图-服务发现&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在服务发现的场景中，我们依赖注册中心组件，这里以Nacos为例，但我们将网关服务&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gateway-service&lt;/code&gt;也注册到Nacos中时&lt;/p&gt;

&lt;p&gt;本身基于Spring Cloud微服务体系的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscoverClient.java&lt;/code&gt;接口，在Nacos组件实例下，会为我们解决各个子服务注册上来的服务发现问题，包括子服务实例对象，是否上线、心跳检测等等&lt;/p&gt;

&lt;p&gt;而我们依赖Spring体系提供的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationEvent&lt;/code&gt;事件监听体系，就可以从统一的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscoverClient&lt;/code&gt;体系下，实现我们的自动聚合场景，这样的好处是不用关心各个注册中心的差异，在Spring Cloud的微服务体系下，注册中心需要遵循&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscoverClient&lt;/code&gt;接口进行标准实现。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;的服务发现场景下，我们通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EventListener&lt;/code&gt;实现对微服务场景下的事件监听，以填充网关成文档的数据实现&lt;/p&gt;

&lt;p&gt;监听事件回调处理源码如下：&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Slf4j&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceChangeListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DiscoveryClient&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discoveryClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceDiscoverHandler&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceDiscoverHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Knife4jGatewayProperties&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;knife4jGatewayProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;EventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ApplicationReadyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HeartbeatEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RefreshRoutesEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;discover service.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discoveryClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;knife4jGatewayProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GatewayStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DISCOVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceDiscoverHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;discover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过注册中心在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscoverClient&lt;/code&gt;体系下的实现，包括&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;调度(Scheduler)&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;心跳检测(HeartBeat)&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;事件回调(ApplicationEvent)&lt;/code&gt;等机制，实现微服务网关层面文档的自动聚合。&lt;/p&gt;

&lt;h2 id=&quot;-5服务发现的路由聚合策略-数据来源&quot;&gt;🐮 5.服务发现的路由聚合策略-数据来源&lt;/h2&gt;

&lt;p&gt;在上面章节中，我们从使用特点、两大场景(手动/服务发现)等全面介绍了knife4j-gateway组件，在文末，还是有必要和大家讲讲该组件在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;discover&lt;/code&gt;服务发现模式下，子服务的是数据来源处理规则&lt;/p&gt;

&lt;p&gt;主要是4个方面，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于Spring Cloud Gateway配置的routes规则解析子服务路由，数据来源：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.cloud.gateway.routes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在discover服务发现场景下，针对自定义添加的routes，默认再次追加，数据来源：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j.gateway.routes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;服务发现discover模式下，开发者在网关成的路由转发模式默认通过DiscoveryClient的默认方式转发路由，规则是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern:/service-id/**&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;接收编码方式动态注入Spring Cloud Gateway网关的路由，进行聚合转发&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;51-手动配置-自定义routes&quot;&gt;5.1 手动配置-自定义Routes&lt;/h3&gt;

&lt;p&gt;自定义Routes主要是开发者根据&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4j-gateway&lt;/code&gt;组件提供的开发配置，在进行手动聚合时，填写的配置，这部分的配置是网关聚合的数据来源之一&lt;/p&gt;

&lt;p&gt;而配置内容&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;组件不会做任何处理,开发者配置什么就展示什么&lt;/p&gt;

&lt;p&gt;示例配置如下：&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;knife4j&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 选择手动&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;manual&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;用户服务&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;service-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;user-service&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/user/v2/api-docs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;52-discoverclient自动发现&quot;&gt;5.2 DiscoverClient自动发现&lt;/h3&gt;

&lt;p&gt;如果开发者在Spring Cloud Gateway网关组件下没有配置子服务的转发路由规则，完全依靠默认的转发规则(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern:/service-id/**&lt;/code&gt;)，其实就是根据子服务名称进行转发&lt;/p&gt;

&lt;p&gt;在这种规则下，knife4j-gateway组件会读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscoverClient&lt;/code&gt;组件下注入的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscoveryClientRouteDefinitionLocator&lt;/code&gt;路由列表进行解析&lt;/p&gt;

&lt;p&gt;在Spring Cloud Gateway网关的配置，开启该规则，配置如下：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spring&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 路由网关配置&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 启用了自动根据服务名建立路由&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;discovery&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;locator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;lower-case-service-id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;组件中，就是直接获取该模式下的子服务列表转发规则，注入到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;组件下的数据源，作为ui层面的转发依据&lt;/p&gt;

&lt;p&gt;部分源码解析如下:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DiscoverClientRouteServiceConvert&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AbstactServiceRouterConvert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DiscoveryClientRouteDefinitionLocator&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;discoveryClientRouteDefinitionLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Knife4jGatewayProperties&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;knife4jGatewayProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ServiceRouterHolder&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Spring Cloud Gateway DiscoverClient process.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 取默认子服务的路径规则&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;discoveryClientRouteDefinitionLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRouteDefinitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startLoadBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServiceUtils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getExcludeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseRouteDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;holder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;knife4jGatewayProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getDiscover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPredicates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;nx&quot;&gt;routeDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//others...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;53-spring-gateway网关routes配置&quot;&gt;5.3 Spring Gateway网关Routes配置&lt;/h3&gt;

&lt;p&gt;该配置属性和自定义配置knife4j-gateway组件的routes一样，开发者一般会自定义配置子服务的路由转发策略，通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.cloud.gateway.routes&lt;/code&gt;进行配置&lt;/p&gt;

&lt;p&gt;而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;会获取该部分的数据源，通过读取子服务配置的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Predicate&lt;/code&gt;来获取子服务的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Path&lt;/code&gt;前缀ContextPath规则进行聚合&lt;/p&gt;

&lt;h3 id=&quot;54-动态路由注册配置&quot;&gt;5.4 动态路由注册配置&lt;/h3&gt;

&lt;p&gt;动态路由注册可能在某些特殊的场景下也有需求，因此&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-gateway&lt;/code&gt;也会把动态注入进来的路由进行聚合，作为文档数据源进行展示&lt;/p&gt;

&lt;p&gt;动态数据源来源于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RouteDefinitionRepository&lt;/code&gt;对象&lt;/p&gt;

&lt;h2 id=&quot;6-总结&quot;&gt;6.👻 总结&lt;/h2&gt;

&lt;p&gt;好了，本文介绍到这里也基本涵盖了knife4j-gateway网关聚合组件的方方面面，希望该组件能给你带来帮助~~!&lt;/p&gt;

&lt;p&gt;您有更多的想法或者建议，可以关注公众号”八一菜刀”，参与Knife4j的交流群进行沟通反馈，谢谢&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4j" /><summary type="html">大家好，这篇文章主要是介绍分享Knife4j-gateway网关聚合文档组件,自4.0版本发布该组件后，得到了大家的积极响应，我们也是积极响应用户的需求，持续迭代优化</summary></entry><entry><title type="html">枚举烦恼终结!在Knife4j文档中如何优雅的处理枚举类型的展示及调试问题</title><link href="http://localhost:4000/2023/08/07/knife4j-handler-enum/" rel="alternate" type="text/html" title="枚举烦恼终结!在Knife4j文档中如何优雅的处理枚举类型的展示及调试问题" /><published>2023-08-07T00:00:00+08:00</published><updated>2023-08-07T00:00:00+08:00</updated><id>http://localhost:4000/2023/08/07/knife4j-handler-enum</id><content type="html" xml:base="http://localhost:4000/2023/08/07/knife4j-handler-enum/">&lt;p&gt;本文主要介绍在Knife4j中如何处理枚举，主要包含两个方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过技术手段，将枚举的value值以及描述在文档界面进行呈现，完善接口信息展示&lt;/li&gt;
  &lt;li&gt;能通过Knife4j的调试功能针对枚举参数快速调试。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关联Issues：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://github.com/xiaoymin/knife4j/issues/605&quot;&gt;枚举类参数value和desc的注释&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I7EKIL#note_20334444&quot;&gt;4.1.0版本下，枚举类@ToString方法自定义可用值和@JsonValue注解不兼容&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🏖️ 本文仓库：&lt;a href=&quot;https://github.com/xiaoymin/knife4j-demo/tree/master/knife4j-handler-enum&quot;&gt;knife4j-handler-enum&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;需求场景分析&quot;&gt;需求场景分析&lt;/h2&gt;

&lt;p&gt;通常我们在定义枚举时，不管是简单的枚举定义，或者枚举类中包含多种属性，在Swagger或者springdoc的界面中，都只能通过枚举的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;属性进行展示，&lt;/p&gt;

&lt;p&gt;例如如下枚举类:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Getter&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;MATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;数学&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ENGLISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;英语&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CHINESE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;语文&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;COMPUTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;计算机&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 课程编码
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 课程标签
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终在文档页面展示效果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/handler-enum/enum-common.jpg&quot; alt=&quot;图1.Knife4j中常规枚举展示效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;:::danger 问题&lt;/p&gt;

&lt;p&gt;这种效果可能无法满足我们的要求，主要是我们提供给外部调用我们的接口文档的开发者，如果我们的枚举&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;属性定义的通俗易懂，那么是没有问题，如果有其他的场景定义，那么只通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;属性是很难达到文档解释清楚的&lt;/p&gt;

&lt;p&gt;对于文档中，开发者可能更希望将枚举说代表的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;意义在文档中进行展示，这对于接口对接人员可以一目了然清楚枚举的最终定义和说明&lt;/p&gt;

&lt;p&gt;:::&lt;/p&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;对于枚举类型展示明细的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt;,最简单的方案就是重写枚举类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString&lt;/code&gt;方法，开发者可以将枚举的字典定义以及description描述信息统一在该方法中进行重写输出&lt;/p&gt;

&lt;p&gt;示例代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Getter&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;MATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;数学&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ENGLISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;英语&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CHINESE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;语文&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;COMPUTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;计算机&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 课程编码
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 课程标签
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们通过重写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString&lt;/code&gt;方法，将枚举的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;属性和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;label&lt;/code&gt;属性进行拼接，label属性一般将我们该枚举说要展示的意思描述清楚，知道该枚举类说代表的意思。&lt;/p&gt;

&lt;p&gt;在Ui中最终效果展示如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/handler-enum/enum-json.jpg&quot; alt=&quot;图2.Knife4j中枚举重写toString展示效果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们虽然解决了文档展示问题，但是又会带来新的问题,如果我们的请求是form的情况下，在调试时，枚举类型参数选择下拉框，枚举类参数下拉框的值也会随之变成value - desc，导致传参异常：&lt;/p&gt;

&lt;p&gt;报错信息（数据绑定异常）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;2023-08-07T20:04:35.640+08:00  WARN 40180 --- [io-19001-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity&amp;lt;com.xiaominfo.knife4j.core.CourseInfo&amp;gt; com.xiaominfo.knife4j.rest.EnumRestController.form(com.xiaominfo.knife4j.core.CourseInfo): [Field error in object 'courseInfo' on field 'courseType': rejected value [2]; codes [typeMismatch.courseInfo.courseType,typeMismatch.courseType,typeMismatch.com.xiaominfo.knife4j.core.CourseType,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [courseInfo.courseType,courseType]; arguments []; default message [courseType]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'com.xiaominfo.knife4j.core.CourseType' for property 'courseType'; Failed to convert from type [java.lang.String] to type [@io.swagger.v3.oas.annotations.media.Schema com.xiaominfo.knife4j.core.CourseType] for value [2]]] ]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如&lt;a href=&quot;https://github.com/xiaoymin/knife4j/issues/605&quot;&gt;issues:枚举类参数value和desc的注释&lt;/a&gt;中反馈的一样&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;⚠️ 该问题在swagger2规范下会复现，openapi3存在解析问题，但是调试问题依然存在&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/handler-enum/enum-form.png&quot; alt=&quot;图3.Knife4j中枚举调试下拉框&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，如何解决调试问题呢?&lt;/p&gt;

&lt;h2 id=&quot;数据调试&quot;&gt;数据调试&lt;/h2&gt;

&lt;p&gt;我们在解决这样的场景时，需要要考虑到两种不同接口在Spring Boot框架中的参数赋值情况，主要是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/x-www-form-urlencoded&lt;/code&gt;:基于表单请求的方式，Spring Boot框架针对提交的请求参数主要通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDataBinder&lt;/code&gt;组件实现提交参数的数据转换、绑定、格式化等处理操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/json&lt;/code&gt;:而对于JSON提交的接口参数，对于数据的转换这主要依赖于数据的反序列化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两种方式对于springdoc-openapi处理也是一样，会存在不同的差异，开发者需要分开进行处理。&lt;/p&gt;

&lt;p&gt;接下来就针对这这两种不同的接口场景，对于枚举类型展示明细的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;description&lt;/code&gt;提供不同的处理方案&lt;/p&gt;

&lt;h3 id=&quot;表单请求&quot;&gt;表单请求&lt;/h3&gt;

&lt;p&gt;针对表单请求，我们需要为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDataBinder&lt;/code&gt;组件单独提供枚举类的数据绑定逻辑，通过实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PropertyEditorSupport&lt;/code&gt;接口，并且在Spring Boot框架中Controller增强为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDataBinder&lt;/code&gt;初始化不同枚举类的数据绑定。&lt;/p&gt;

&lt;p&gt;考虑到在实际项目中的通用解决方案(为每个枚举提供数据绑定解析),抽象一个通用接口&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CommonFormEnumParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Realize the instantiation of the enumeration according to the input input
     * @param input input character
     * @return enumeration instance
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们在枚举类中实现该接口，提供根据外部数据进行枚举实例对象转换的方法，如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Slf4j&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Getter&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CommonFormEnumParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;MATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;数学&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ENGLISH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;英语&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;CHINESE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;语文&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;COMPUTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;计算机&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 课程编码
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * 课程标签
     */&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fromValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;input:{}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;courseType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 根据规则自定义实现&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Invalid CourseType value: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据反射class创建一个默认的PropertyEditorSupport实现，代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericEnumPropertySupport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PropertyEditorSupport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;enumClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setAsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enumClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()){&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//必须是枚举&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonFormEnumParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAssignableFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enumClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enumClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getEnumConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// 因为都实现了CommonFormEnumParser接口，随便取一个枚举元素都行&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;CommonFormEnumParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommonFormEnumParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后通过Spring框架提供的Advice增强注入到框架中，实现@InitBinder绑定逻辑&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;RestControllerAdvice&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GlobalRestAdvice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;InitBinder&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initBinder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WebDataBinder&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//这里可以做成scan扫描包的方式，扫描所有枚举类，然后分批注入，或者其他的方式也行，看自己项目的规则&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerCustomEditor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GenericEnumPropertySupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于我们自定义了枚举的初始化数据绑定方法，逻辑是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;名称相等或者和name匹配&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，我们在form表单接口提交请求时，对于枚举的类型，就可以参考常规的方案，提交枚举的name进行调试，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/handler-enum/enum-form-debug.jpg&quot; alt=&quot;图4.Knife4j中枚举调试form&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;json请求&quot;&gt;JSON请求&lt;/h3&gt;

&lt;p&gt;而对于JSON的请求，就简单很多，我们在上面提过，JSON的数据绑定是在Spring Boot框架中是通过反序列化进行处理。&lt;/p&gt;

&lt;p&gt;以框架中用jackson为例，首先需要更改枚举类的toString方法，通过@JsonValue注解将枚举的属性值列出来，以便文档展示，其次，反序列化时，提供反序列化的规则。&lt;/p&gt;

&lt;p&gt;代码如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Slf4j&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseTypeDeserializer&lt;/span&gt;   &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JsonDeserializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DeserializationContext&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deserializationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;des....&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsonParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getValueAsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value:{}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;courseType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 根据规则自定义实现&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equalsIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;courseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Invalid CourseType value: &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;并且在枚举类中通过注解&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@JsonDeserialize&lt;/code&gt;强指定反序列化规则&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Slf4j&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;AllArgsConstructor&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Getter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;JsonDeserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseTypeDeserializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CommonFormEnumParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CourseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//others...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;以上就是针对枚举在Knife4j中通过文档展示以及Debug调试的通用方案分享，对于代码中枚举的反序列化以及通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDataBinder&lt;/code&gt;组件进行数据绑定的操作，本文只是提供了一个思路方案，开发者可以在本文基础上进行扩展优化&lt;/p&gt;

&lt;p&gt;例如对于所有枚举类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scan&lt;/code&gt;扫描class的方式，批量在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebDataBinder&lt;/code&gt;组件中进行添加，等等，希望本文能给开发者提供一个思路，开发者根据此内容举一反三，处理自己在实际项目中碰到的问题。&lt;/p&gt;

&lt;p&gt;您有更多的想法或者建议，可以关注公众号”八一菜刀”，参与Knife4j的交流群进行沟通反馈，谢谢&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4j" /><summary type="html">本文主要介绍在Knife4j中如何处理枚举，主要包含两个方面：</summary></entry><entry><title type="html">生产环境如何屏蔽Knife4j、Swagger等Ui资源和接口</title><link href="http://localhost:4000/2023/07/19/knife4j-production-forbidden-ui/" rel="alternate" type="text/html" title="生产环境如何屏蔽Knife4j、Swagger等Ui资源和接口" /><published>2023-07-19T00:00:00+08:00</published><updated>2023-07-19T00:00:00+08:00</updated><id>http://localhost:4000/2023/07/19/knife4j-production-forbidden-ui</id><content type="html" xml:base="http://localhost:4000/2023/07/19/knife4j-production-forbidden-ui/">&lt;p&gt;本文主要介绍在 Spring Boot 应用中,如何在生产环境屏蔽Knife4j及相关Swagger资源&lt;/p&gt;

&lt;p&gt;关联Issues：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I67JDM&quot;&gt;开启生产环境,屏蔽所有资源接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I4XDYE&quot;&gt;生产环境屏蔽bug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I2810R&quot;&gt;3.0.2 配置生产环境屏蔽后，依然可以访问部分接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/IYSZE&quot;&gt;yml格式 屏蔽Swagger所有资源，不生效&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/IP1HK&quot;&gt;生产环境swagger-ui屏蔽&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/ISBVR&quot;&gt;开启生产环境,屏蔽Swagger所有资源接口 建议&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I4Z2Z6&quot;&gt;生产环境屏蔽配置&amp;amp;2.0.9版本问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://github.com/xiaoymin/knife4j/issues/578&quot;&gt;4.1.0 basic 验证， 任意请求都会导致请求通过，从而导致doc.html 不提示验证&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://github.com/xiaoymin/knife4j/issues/338&quot;&gt;springcloud 生产环境无法关闭&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🏖️ 本文仓库：&lt;a href=&quot;https://github.com/xiaoymin/knife4j-demo/tree/master/knife4j-forbidden-api&quot;&gt;knife4j-forbidden-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;从仓库的issues中不难发现，该需求确确实实存在，虽然在Knife4j之前的版本，并没有提供屏蔽资源相关的配置，但也有很多开发者提了建议&lt;/p&gt;

&lt;p&gt;这在之后的版本迭代中,Knife4j主要提供了&lt;a href=&quot;/docs/features/accessControl#352-访问页面加权控制&quot;&gt;Basic验证&lt;/a&gt;和&lt;a href=&quot;/docs/features/accessControl&quot;&gt;Production暴力屏蔽&lt;/a&gt;的手段，这些都是基于实际需求场景出发来做的,生产环境屏蔽接口描述也是为了保护应用程序安全的一种手段。&lt;/p&gt;

&lt;p&gt;本文主要站在实际需求以及业务场景的角度，去分析如何在生产环境进行屏蔽接口&lt;/p&gt;

&lt;p&gt;从issues中，我们屏蔽的场景主要发生在：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ 单体Spring Boot应用屏蔽接口和静态ui资源&lt;/li&gt;
  &lt;li&gt;✅ 微服务Spring Cloud、Spring Cloud Gateway网关场景下屏蔽接口和静态资源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;屏蔽的手段主要包括以下几种(欢迎补充):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;🌱 基于Spring Boot框架提供的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt;条件控制相关&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;的生效&lt;/li&gt;
  &lt;li&gt;⛔ 基于Servlet体系下的Filter过滤器进行拦截屏蔽&lt;/li&gt;
  &lt;li&gt;⛰️ 基于Gateway网关体系下的Filter过滤器进行拦截屏蔽&lt;/li&gt;
  &lt;li&gt;💀 基于Maven项目的jar排除机制从根源解决问题&lt;/li&gt;
  &lt;li&gt;💣 基于生产环境Nginx、Ingress等控制请求路径处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1目的&quot;&gt;1.目的&lt;/h2&gt;

&lt;p&gt;通过开发者提出的issues，屏蔽的目的及提供Basic验证的方案来分析，我觉得主要有以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;🔐 生产环境上线的系统，屏蔽接口描述性规范，对于生产系统是一种&lt;strong&gt;安全保护机制&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;🔐 Basic方案更希望的是能够上线后也保留接口，解决生产环境出问题时便于调试定位问题，当Basic能起到一定的安全防护作用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2解决方案&quot;&gt;2.解决方案&lt;/h2&gt;

&lt;h3 id=&quot;21--基于spring-boot框架提供的conditional条件控制相关bean的生效&quot;&gt;2.1 🌱 基于Spring Boot框架提供的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt;条件控制相关&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;的生效&lt;/h3&gt;

&lt;p&gt;在Spring Boot开发框架中，提供了一种条件注入的机制注解&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt;,顾名思义就是可以指定我们的代码在特定环境才生效。&lt;/p&gt;

&lt;p&gt;开发者在写第三方的starter的包时，是一种经常使用的手段。有关&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt;注解等条件注入的说明，可以参考我之前分享的一篇Blog&lt;a href=&quot;https://www.xiaominfo.com/blog/springboot/2020-09-23-spring-boot-conditional&quot;&gt;《Spring Boot框架中如何优雅的注入实体Bean》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们的需求场景是：在生产环境中能够屏蔽部分接口以及Ui资源，那么我们是否可以结合&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt;注解以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Profile&lt;/code&gt;注解来实现不同环境的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;加载机制呢？&lt;/p&gt;

&lt;p&gt;答案当然是可以的,考虑到在Spring Boot环境中大部分的中间件都提供了配置化,类似&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enable&lt;/code&gt;属性来开启加载配置，这里可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring.profiles&lt;/code&gt;通过配置进行区分&lt;/p&gt;

&lt;p&gt;简单的例子：我们对于Knife4j的配置文件有两个，分别对应dev环境和prod环境&lt;/p&gt;

&lt;p&gt;配置文件如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开发环境(dev)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```yml title=”application-dev.yml”
knife4j:
  enable: true
  ## other properties…….&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 生产环境(prod)

```yml title=&quot;application-prod.yml&quot;
knife4j:
  enable: false
  ## other properties.......

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在这种情况下，我们程序在启动时，只需要通过设定Spring Boot应用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profiles&lt;/code&gt;，就可以实现我们的接口无法访问，如果我们指定&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;环境，那么访问文档时，会出现接口404的情况~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;这种情况是对于Java后端应用的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Configuration&lt;/code&gt;类级别的控制，通过Spring Boot框架提供的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Conditional&lt;/code&gt;注解来达到条件注入及部分代码可配置生效的目的&lt;/p&gt;

&lt;p&gt;虽然界面可访问，但是对于接口的规范描述并没有作用。&lt;/p&gt;

&lt;h3 id=&quot;22--基于servlet体系下的filter过滤器进行拦截屏蔽&quot;&gt;2.2 ⛔ 基于Servlet体系下的Filter过滤器进行拦截屏蔽&lt;/h3&gt;

&lt;p&gt;基于Servlet体系下的Filter过滤器进行拦截屏蔽是一种拦截机制，主要利用了Servlet规范下的Filter机制，对所有的请求资源进行拦截，开发者可以对所有涉及到Knife4j、Swagger资源的请求都进行拦截屏蔽&lt;/p&gt;

&lt;p&gt;场景的资源拦截地址可以参考文档&lt;a href=&quot;/docs/features/accessControl&quot;&gt;《访问权限控制》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们知道了要屏蔽的资源，以及Filter机制，此时，开发者即可以自己实现Filter代码，并将其注入到Spring Boot的应用框架中接口&lt;/p&gt;

&lt;p&gt;在Knife4j提供的&lt;a href=&quot;https://gitee.com/xiaoym/knife4j/blob/dev/knife4j/knife4j-openapi2-spring-boot-starter/src/main/java/com/github/xiaoymin/knife4j/spring/filter/ProductionSecurityFilter.java&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductionSecurityFilter.java&lt;/code&gt;&lt;/a&gt; 如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpServletRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;httpServletRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRequestURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 匹配判断uri地址是否我们需要屏蔽的资源&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;HttpServletResponse&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HttpServletResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;customCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;You do not have permission to access this page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;23-️-基于gateway网关体系下的filter过滤器进行拦截屏蔽&quot;&gt;2.3 ⛰️ 基于Gateway网关体系下的Filter过滤器进行拦截屏蔽&lt;/h3&gt;

&lt;p&gt;基于Gateway网关体系下的Filter过滤器进行拦截屏蔽和Servlet体系下的Filter进行拦截是同一种思想，因为Spring Cloud Gateway是基于Netty驱动设计实现，但思想方法是同一种&lt;/p&gt;

&lt;p&gt;无非是使用Spring Cloud Gateway提供的Filter接口，自定义实现match后屏蔽过滤&lt;/p&gt;

&lt;p&gt;可以参考Knife4j代码中的&lt;a href=&quot;https://gitee.com/xiaoym/knife4j/blob/dev/knife4j/knife4j-gateway-spring-boot-starter/src/main/java/com/github/xiaoymin/knife4j/spring/gateway/filter/basic/WebFluxSecurityBasicAuthFilter.java&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebFluxSecurityBasicAuthFilter.java&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;24--基于maven项目的jar排除机制从根源解决问题&quot;&gt;2.4 💀 基于Maven项目的jar排除机制从根源解决问题&lt;/h3&gt;

&lt;p&gt;该方法也是利用Maven项目提供的Profiles机制，我们在项目打包构建的时候，可以对一些不需要的jar包进行exclusion排除，比如Knife4j的ui包或者swagger官方ui包，这种jar包都是webjar类型，里面全部是静态资源&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Maven&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Profiles&lt;/code&gt;是一种配置管理机制，允许你根据不同的环境或条件设置和激活不同的构建配置。可以使用Profiles来定义一组插件、依赖项和构建选项，这些选项在特定的构建环境中生效&lt;/p&gt;

&lt;p&gt;如果我们想在生产环境无需访问提供外部入口，那么我们在打包构建的时候可以直接排除即可&lt;/p&gt;

&lt;p&gt;基于这种思想，我们可以考虑在项目的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pom.xml&lt;/code&gt;中配置Maven的Profiles，配置如下：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 激活条件为&quot;dev&quot;系统属性存在 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;env&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;prod&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 激活条件为&quot;prod&quot;环境变量存在 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;env&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;prod&lt;span class=&quot;nt&quot;&gt;&amp;lt;/value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.github.xiaoymin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;knife4j-openapi3-spring-boot-starter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.github.xiaoymin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;knife4j-openapi3-ui&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.webjars&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;swagger-ui&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在上面的配置中，主要作用如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ 声明了两个Profile类型，id分别为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;✅ 配置了两种Profile类型的激活条件，通过环境变量名称来进行区分&lt;/li&gt;
  &lt;li&gt;✅ 在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prod&lt;/code&gt;类型下面，我们配置的引用jar的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exclusions&lt;/code&gt;规则，该Profile类型下会排除&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;knife4j-openapi3-ui&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swagger-ui&lt;/code&gt;这两个jar包，而这两个包分别是Knife4j和swagger官网提供的Ui资源包&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时，当我们在项目构建打包时，我们就可以通过传入变量，进行构建，排除相关的jar包，命令如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean package &lt;span class=&quot;nt&quot;&gt;-Pprod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;25--基于生产环境nginxingress等控制请求路径处理&quot;&gt;2.5 💣 基于生产环境Nginx、Ingress等控制请求路径处理&lt;/h3&gt;

&lt;p&gt;上面2.1~2.4提供的方案都是通过代码或者工程上进行配置以达到目的，如果我们的服务已经上线，不管是Nginx或者在Kubernetes集群环境中，都可以通过Nginx、Ingress等代理服务器进行配置拦截处理&lt;/p&gt;

&lt;p&gt;也不失为一种处理方式。&lt;/p&gt;

&lt;p&gt;在Nginx中，我们只需要配置拦截资源接口，配置如下：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
location /doc.html &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;403&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 返回 403 状态码表示禁止访问&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

location /swagger-ui.html &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;403&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 返回 403 状态码表示禁止访问&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

// 其他路由接口及资源

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而在Kubernetes集群环境中，可以通过使用Ingress控制请求,配置示例如下：&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-ingress&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 转发doc.html到error-service,可以在该服务中定义一个错误页面或返回适当的错误码&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/doc.html&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;error-service&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3总结&quot;&gt;3.总结&lt;/h2&gt;

&lt;p&gt;本文从工程、代码等多方角度给大家提供了一种解决思路方案，希望能对大家有所帮助。&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4j" /><summary type="html">本文主要介绍在 Spring Boot 应用中,如何在生产环境屏蔽Knife4j及相关Swagger资源</summary></entry><entry><title type="html">使用Claude修改Knife4j中的issues</title><link href="http://localhost:4000/2023/07/15/knife4j-use-claude-fixed-issue/" rel="alternate" type="text/html" title="使用Claude修改Knife4j中的issues" /><published>2023-07-15T00:00:00+08:00</published><updated>2023-07-15T00:00:00+08:00</updated><id>http://localhost:4000/2023/07/15/knife4j-use-claude-fixed-issue</id><content type="html" xml:base="http://localhost:4000/2023/07/15/knife4j-use-claude-fixed-issue/">&lt;p&gt;本文和Knife4j使用无关，主要分享作者在解决Knife4j的issues过程中如何通过Claude.Ai快速解决问题&lt;/p&gt;

&lt;p&gt;关联Issues：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I6T78E&quot;&gt;能否出个swagger转ts的插件,在文档管理中多一个,导出ts,想帮我的下游减轻工作量&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://github.com/xiaoymin/knife4j/issues/568&quot;&gt;https://github.com/xiaoymin/knife4j/issues/568&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📹 视频地址：&lt;a href=&quot;https://www.bilibili.com/video/BV1mm4y1E7iV/?vd_source=ef34098d916a578698508a43063099ac&quot;&gt;https://www.bilibili.com/video/BV1mm4y1E7iV/?vd_source=ef34098d916a578698508a43063099ac&lt;/a&gt;&lt;/p&gt;
&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=700889944&amp;amp;bvid=BV19h4y1j7y9&amp;amp;cid=1197294840&amp;amp;page=1&amp;amp;high_quality=1&amp;amp;danmaku=0&quot; allowfullscreen=&quot;allowfullscreen&quot; width=&quot;100%&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;-背景&quot;&gt;🌋 背景&lt;/h2&gt;

&lt;p&gt;在上面的issues中，有用户提到在目前的Knife4j的界面中，对于生成的Script代码(主要是TypeScript)，对于实体类部分，缺失属性定义，于是需要解决&lt;/p&gt;

&lt;p&gt;主要的问题点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;❓ Knife4j的Script功能来源于&lt;a href=&quot;https://github.com/xiaoymin/knife4j/pull/489&quot;&gt;PR&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;❓ 代码中使用了&lt;a href=&quot;https://babel.dev/docs/babel-generator&quot;&gt;babel/generator&lt;/a&gt;,而我对该组件并不熟悉&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-解决过程&quot;&gt;🔥 解决过程&lt;/h2&gt;

&lt;h3 id=&quot;传统方案&quot;&gt;传统方案&lt;/h3&gt;

&lt;p&gt;1、首先，我直接定位到函数的源码，查看源码，看是否有属性直接能够使用，部分源码：&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TSPropertySignatureBuilder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpressionKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;typeAnnotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TSTypeAnnotationKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namedTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TSPropertySignature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CommentKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpressionKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ExpressionKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SourceLocationKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;typeAnnotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TSTypeAnnotationKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}):&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;namedTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TSPropertySignature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/use-claude-fixed-issues/source-property.jpg&quot; alt=&quot;图1.t.tsPropertySignature函数源码&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在源码中，有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt;属性，在没有查看官网文档的情况下，我姑且一试,直接给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt;赋值，看直接传递是否奏效,结果并未不满意。&lt;/p&gt;

&lt;p&gt;2、这种情况下只能去去看了&lt;a href=&quot;https://babel.dev/docs/babel-generator&quot;&gt;babel/generator&lt;/a&gt;的官方文档了，去翻看部分函数的doc文档参数，希望能够快速找到能够为生成的interface的属性标注comment的方法&lt;/p&gt;

&lt;p&gt;但我并没有找到我所需要的，能够为生成的properties增加注释的方法&lt;/p&gt;

&lt;h2 id=&quot;-求助ai&quot;&gt;💯 求助AI&lt;/h2&gt;

&lt;p&gt;想到之前在网上看到&lt;a href=&quot;https://claude.ai/&quot;&gt;Claude2&lt;/a&gt;已经发布，支持100k的上下文并且免费，因此决定试试看&lt;/p&gt;

&lt;p&gt;1、首先我将Knife4j中整段js函数作为附件进行了上传，并且构建了Prompt，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/use-claude-fixed-issues/js-fun.jpg&quot; alt=&quot;图2.Claude2中的Prompt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Claude2也给出了答案，但好像并不是我想要的，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/use-claude-fixed-issues/Claude-a1.png&quot; alt=&quot;图3.Claude2中回答&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、于是我在继续追问，因为知道具体的函数所执行的位置，所以直接问函数中的某一个方法，看看Claude2是否能够定位问题&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/use-claude-fixed-issues/Claude-a2.png&quot; alt=&quot;图4.Claude2中回答&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这一次，Claude2好像理解了我的意图，并定位出了问题所在，我根据提示，在代码中进行了修改，代码修改如下：&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getInterfaceBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;openOptional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tsTypeAnnotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTsType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBaseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;openOptional&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tsPropertySignature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;openOptional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 增加注释&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leadingComments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;CommentBlock&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; `&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在界面中，再次刷新界面，Knife4j的Scirpt中，每一个定义的interface都有了comment，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/use-claude-fixed-issues/show.jpg&quot; alt=&quot;图5.Knife4j中Script功能&quot; /&gt;&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4j" /><summary type="html">本文和Knife4j使用无关，主要分享作者在解决Knife4j的issues过程中如何通过Claude.Ai快速解决问题</summary></entry><entry><title type="html">自定义API接口在Knife4j的Ui界面中显示</title><link href="http://localhost:4000/2023/07/13/knife4j-customer-add-api/" rel="alternate" type="text/html" title="自定义API接口在Knife4j的Ui界面中显示" /><published>2023-07-13T00:00:00+08:00</published><updated>2023-07-13T00:00:00+08:00</updated><id>http://localhost:4000/2023/07/13/knife4j-customer-add-api</id><content type="html" xml:base="http://localhost:4000/2023/07/13/knife4j-customer-add-api/">&lt;p&gt;本文主要介绍在 Spring Boot 应用中,如何使用 springfox 和 springdoc 框架自定义添加外部 API 接口,并在 Knife4j 的 UI 界面中展示。&lt;/p&gt;

&lt;p&gt;关联Issues：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ &lt;a href=&quot;https://gitee.com/xiaoym/knife4j/issues/I640E8&quot;&gt;添加SpringSecurity登录接口到knife4j中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🏖️ 本文仓库：&lt;a href=&quot;https://github.com/xiaoymin/knife4j-demo/tree/master/knife4j-customer-api&quot;&gt;knife4j-customer-api&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📹 视频地址：&lt;a href=&quot;https://www.bilibili.com/video/BV19h4y1j7y9/?vd_source=ef34098d916a578698508a43063099ac&quot;&gt;https://www.bilibili.com/video/BV19h4y1j7y9/?vd_source=ef34098d916a578698508a43063099ac&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=615960537&amp;amp;bvid=BV19h4y1j7y9&amp;amp;cid=1196531434&amp;amp;page=1&amp;amp;high_quality=1&amp;amp;danmaku=0&quot; allowfullscreen=&quot;allowfullscreen&quot; width=&quot;100%&quot; height=&quot;500&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; sandbox=&quot;allow-top-navigation allow-same-origin allow-forms allow-scripts&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;-本质&quot;&gt;🌱 本质&lt;/h2&gt;

&lt;p&gt;我们要实现将自定义的API接口添加到Ui界面中显示，其实最简单的就是在我们接口渲染的Swagger或者OpenAPI对象中，添加相应的新对象(PS:用于在OpenAPI规范中描述接口定义的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Operation&lt;/code&gt;对象)属性就好了&lt;/p&gt;

&lt;p&gt;这需要借助于底层解析框架对外是否提供了开放接口，允许我们这么做，还好目前不管是springfox或者springdoc，其实都支持开发者自定义。&lt;/p&gt;

&lt;p&gt;主要的区别是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;✅ &lt;strong&gt;springfox&lt;/strong&gt;提供的是&lt;a href=&quot;/docs/action/springfox/springfox3&quot;&gt;spring-plugin&lt;/a&gt;体系，在解析时添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Operation&lt;/code&gt;对象，这是进行中的处理行为&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;springdoc&lt;/strong&gt;提供的全局Customer接口，springdoc已经完成了所有接口的对象解析，但开发者实现Customer接口可以自定义更改，这是后置行为&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-springfox&quot;&gt;📜 springfox&lt;/h2&gt;

&lt;p&gt;在springfox的框架中，提供了基于spring-plugin体系的解析接口，开发者如果阅读过springfox的源码后，应该很轻松就能实现&lt;/p&gt;

&lt;p&gt;主要的动作包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;🎠 自定义plugin接口，实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApiListingScannerPlugin.java&lt;/code&gt;类，并且通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Component&lt;/code&gt;或者Java Config得&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;注解注入到Spring的容器中&lt;/li&gt;
  &lt;li&gt;🎢 创建&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Operation&lt;/code&gt;对象，该对象是一个接口的描述，包括：说明、参数、响应、请求类型等等，并且返回&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApiListingScannerPlugin.java&lt;/code&gt;接口约束的方法类型&lt;/li&gt;
  &lt;li&gt;🏎️ springfox这种方式只能提供简单的form表单类型的接口，如果是类似&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@RequestBody&lt;/code&gt;类型的JSON、XML请求，那么&lt;strong&gt;建议放弃~&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例:添加一个简单的login登录接口，代码如下：&lt;/p&gt;

&lt;p&gt;```javascript title=”com.xiaominfo.springfox.customer.CustomerApiPlugin.java”
@Slf4j
@Component
public class CustomerApiPlugin implements ApiListingScannerPlugin {&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public List&amp;lt;ApiDescription&amp;gt; apply(DocumentationContext context) {
    // consumers、produces
    Set&amp;lt;String&amp;gt; mediaSet = new HashSet&amp;lt;&amp;gt;();
    mediaSet.add(MediaType.APPLICATION_JSON_VALUE);
    // 设定参数
    List&amp;lt;Parameter&amp;gt; parameters = new ArrayList&amp;lt;&amp;gt;();
    parameters.add(new ParameterBuilder().name(&quot;username&quot;).required(true).modelRef(new ModelRef(&quot;String&quot;)).defaultValue(&quot;test&quot;).description(&quot;用户名&quot;).build());
    parameters.add(new ParameterBuilder().name(&quot;password&quot;).required(true).modelRef(new ModelRef(&quot;String&quot;)).defaultValue(&quot;123&quot;).description(&quot;密码&quot;).build());
    // 接口的Tag
    Set&amp;lt;String&amp;gt; tags = new HashSet&amp;lt;&amp;gt;();
    tags.add(&quot;首页&quot;);
    // 构建Operation对象
    Operation usernamePasswordOperation = new OperationBuilder(new CachingOperationNameGenerator())
            .method(HttpMethod.POST)
            .tags(tags)
            .summary(&quot;用户名密码登录&quot;)
            .notes(&quot;用户登陆获取token&quot;)
            .parameters(parameters)
            .consumes(mediaSet)
            .produces(mediaSet)
            .build();
    
    // 需要注意的是groupName需要和开发者创建的Docket对象赋值的groupName保持一致
    ApiDescription loginApiDescription = new ApiDescription(&quot;hello&quot;, &quot;/login&quot;, &quot;登录接口描述&quot;, Collections.singletonList(usernamePasswordOperation), false);
    return Collections.singletonList(loginApiDescription);
}

@Override
public boolean supports(DocumentationType documentationType) {
    return documentationType == DocumentationType.SWAGGER_2;
} } ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;-springdoc&quot;&gt;📚 springdoc&lt;/h2&gt;

&lt;p&gt;在springdoc中，其实和springdoc的思想是完全一致的,springdoc也开放了两种级别的customizer接口：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;🏜️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GlobalOperationCustomizer&lt;/code&gt;：针对Operation级别的全局自定义扩展钩子函数，开发者可以对接口中每一个Operation进行扩展自定义实现，或调整，或修改，或增加扩展都行，Knife4j的部分增强特性就是基于此函数实现，可以参考代码&lt;a href=&quot;https://gitee.com/xiaoym/knife4j/blob/dev/knife4j/knife4j-openapi3-jakarta-spring-boot-starter/src/main/java/com/github/xiaoymin/knife4j/spring/extension/Knife4jJakartaOperationCustomizer.java&quot;&gt;Knife4jJakartaOperationCustomizer.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;🏝️ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GlobalOpenApiCustomizer&lt;/code&gt;：是针对整个OpenAPI级别的,开发者在分组或者分包后，得到的单个OpenAPI实例，开发者可以操纵全局的OpenAPI实例，该OpenAPI对象已经是springdoc解析过的实例对象，例如该issues中的需求，开发者只需要自定义创建新Operation对象，然后通过OpenAPI实例对象进行add添加即可完成此需求，部分扩展可以参考代码：&lt;a href=&quot;https://gitee.com/xiaoym/knife4j/blob/dev/knife4j/knife4j-openapi3-jakarta-spring-boot-starter/src/main/java/com/github/xiaoymin/knife4j/spring/extension/Knife4jOpenApiCustomizer.java&quot;&gt;Knife4jOpenApiCustomizer.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;🎠 扩展实现类接口后，注入Spring的容器中即可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;考虑到我们是新增自定义的API接口，因此，可以实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GlobalOpenApiCustomizer&lt;/code&gt;类进行扩展&lt;/p&gt;

&lt;p&gt;代码示例如下：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// com.xiaominfo.springdoc.customer.CustomerOperation.java&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Slf4j&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CustomerOperation&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GlobalOpenApiCustomizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OpenAPI&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;openApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;customer.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 因为要新增自定义的接口，直接这里add&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;PathItem&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PathItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 基础信息 构建Operation&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Operation&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;operationId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;登录接口&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;根据用户名和密码登录获取token&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;singletonList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;登录&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 构建参数&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;zhangFei&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;用户名&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;123456&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;密码&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 构建响应body&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ApiResponses&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiResponses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ApiResponse&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addMediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;*/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())));&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;apiResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apiResponses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 该自定义接口为post&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;pathItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;openApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/login&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，我们可以在界面中查看，已经存在了我们自定义新增的接口，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/customer-api/customer-api-preview.jpg&quot; alt=&quot;图1.自定义API接口在Knife4j的Ui界面中显示&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;-总结&quot;&gt;📖 总结&lt;/h2&gt;

&lt;p&gt;本文主要介绍了基于springfox或者springdoc框架，添加自定义API接口的示例，开发者可以根据其中的思想自行扩展，达到自己的业务需求。&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="Knife4j" /><summary type="html">本文主要介绍在 Spring Boot 应用中,如何使用 springfox 和 springdoc 框架自定义添加外部 API 接口,并在 Knife4j 的 UI 界面中展示。</summary></entry><entry><title type="html">Knife4j框架相关的blog</title><link href="http://localhost:4000/2023/07/10/knife4j-action-index/" rel="alternate" type="text/html" title="Knife4j框架相关的blog" /><published>2023-07-10T00:00:00+08:00</published><updated>2023-07-10T00:00:00+08:00</updated><id>http://localhost:4000/2023/07/10/knife4j-action-index</id><content type="html" xml:base="http://localhost:4000/2023/07/10/knife4j-action-index/">&lt;blockquote&gt;
  &lt;p&gt;温馨提醒
&lt;strong&gt;Knife4jInsight(简单、方便的OpenAPI接口文档私有化聚合平台),地址&lt;/strong&gt;：&lt;a href=&quot;http://knife4j.net&quot;&gt;http://knife4j.net&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近想来,Knife4j的&lt;a href=&quot;https://gitee.com/xiaoym/knife4j&quot;&gt;Gitee&lt;/a&gt;和&lt;a href=&quot;https://github.com/xiaoymin/knife4j&quot;&gt;Github&lt;/a&gt;的仓库已经有接近2000+的issues了,issues中有包含的内容大部分都是提问为主，因此有一个想法，针对Knife4j仓库中的issues中的典型问题，整理成文章，分享给大家&lt;/p&gt;

&lt;p&gt;大家也可以作为教程进行参考。&lt;/p&gt;

&lt;blockquote&gt;

  &lt;p&gt;😄 Welcome Join Us
也欢迎大家投稿、提交PR一起参与进来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我想一篇内容主题输出的主要的形式包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;📝 &lt;strong&gt;一篇文章&lt;/strong&gt; : 文章会在官网的&lt;a href=&quot;https://doc.xiaominfo.com/docs/blog&quot;&gt;Blog专栏&lt;/a&gt;和微信公众号同步发表&lt;/li&gt;
  &lt;li&gt;🌱 &lt;strong&gt;一份Git仓库代码&lt;/strong&gt; ：每篇文章的代码仓库会同步更新到Github，仓库地址: &lt;a href=&quot;https://github.com/xiaoymin/knife4j-demo&quot;&gt;knife4j-demo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;✅ &lt;strong&gt;关联N个issues&lt;/strong&gt; : 主要以仓库issues或者交流群的问题为文章的来源,透过问题希望能讲清楚&lt;/li&gt;
  &lt;li&gt;🎥 &lt;strong&gt;一个视频&lt;/strong&gt; : 看是否有足够的时间，录制一个简单的视频继续加以说明&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要目的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;💪 磨练自己的性格，做事的性格和毅力&lt;/li&gt;
  &lt;li&gt;🔥 为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Knife4j&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Swagger&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenAPI&lt;/code&gt;生态添砖加瓦&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blog列表：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/customer-add-api&quot;&gt;2023/07/13: 如何自定义添加API接口在Knife4j界面中显示&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/use-claude-fixed-issues&quot;&gt;2023/07/15: 使用Claude修改Knife4j中的issues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/production-forbidden-ui&quot;&gt;2023/07/19: 生产环境如何屏蔽Knife4j、Swagger等Ui资源和接口&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/handler-enum&quot;&gt;2023/08/07: 枚举烦恼终结!在Knife4j文档中如何优雅的处理枚举类型的展示及调试问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/gateway/knife4j-gateway-introduce&quot;&gt;2023/08/13: Spring Cloud Gateway网关下的文档聚合?就用它了&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/product/knife4j-new-product-idea&quot;&gt;2023/09/07: Knife4j新产品的想法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/product/knife4j-insight-mvp&quot;&gt;2023/09/19: Knife4jInsight平台版-MVP版本v1.0.0发布&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;📝 &lt;a href=&quot;blog/product/knife4j-insight-dev&quot;&gt;2023/09/20: Knife4jInsight的产品开发历程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>八一菜刀</name></author><category term="Knife4j" /><summary type="html">温馨提醒 Knife4jInsight(简单、方便的OpenAPI接口文档私有化聚合平台),地址：http://knife4j.net</summary></entry><entry><title type="html">2023年6月最新注册ChatGPT账号流程</title><link href="http://localhost:4000/2023/06/10/chatgpt-register/" rel="alternate" type="text/html" title="2023年6月最新注册ChatGPT账号流程" /><published>2023-06-10T00:00:00+08:00</published><updated>2023-06-10T00:00:00+08:00</updated><id>http://localhost:4000/2023/06/10/chatgpt-register</id><content type="html" xml:base="http://localhost:4000/2023/06/10/chatgpt-register/">&lt;h2 id=&quot;chatgpt是什么&quot;&gt;ChatGPT是什么？&lt;/h2&gt;

&lt;p&gt;ChatGPT（全名：Chat Generative Pre-trained Transformer），是&lt;a href=&quot;https://baike.baidu.com/item/OpenAI/19758408?fromModule=lemma_inlink&quot;&gt;OpenAI&lt;/a&gt; 研发的&lt;a href=&quot;https://baike.baidu.com/item/聊天机器人/1052902?fromModule=lemma_inlink&quot;&gt;聊天机器人&lt;/a&gt;程序,于2022年11月30日发布 。&lt;/p&gt;

&lt;p&gt;ChatGPT是&lt;a href=&quot;https://baike.baidu.com/item/人工智能/9180?fromModule=lemma_inlink&quot;&gt;人工智能&lt;/a&gt;技术驱动的&lt;a href=&quot;https://baike.baidu.com/item/自然语言处理/365730?fromModule=lemma_inlink&quot;&gt;自然语言处理&lt;/a&gt;工具，它能够通过理解和学习人类的语言来进行对话，还能根据聊天的&lt;a href=&quot;https://baike.baidu.com/item/上下文/2884376?fromModule=lemma_inlink&quot;&gt;上下文&lt;/a&gt;进行互动，真正像人类一样来聊天交流，甚至能完成撰写&lt;a href=&quot;https://baike.baidu.com/item/邮件/3110293?fromModule=lemma_inlink&quot;&gt;邮件&lt;/a&gt;、视频&lt;a href=&quot;https://baike.baidu.com/item/脚本/399?fromModule=lemma_inlink&quot;&gt;脚本&lt;/a&gt;、&lt;a href=&quot;https://baike.baidu.com/item/文案/92610?fromModule=lemma_inlink&quot;&gt;文案&lt;/a&gt;、&lt;a href=&quot;https://baike.baidu.com/item/翻译/32864?fromModule=lemma_inlink&quot;&gt;翻译&lt;/a&gt;、&lt;a href=&quot;https://baike.baidu.com/item/代码/86048?fromModule=lemma_inlink&quot;&gt;代码&lt;/a&gt;，写&lt;a href=&quot;https://baike.baidu.com/item/论文/149478?fromModule=lemma_inlink&quot;&gt;论文&lt;/a&gt; 等任务。&lt;/p&gt;

&lt;h2 id=&quot;账号注册流程准备工作&quot;&gt;账号注册流程(准备工作)&lt;/h2&gt;

&lt;p&gt;由于ChatGPT在中国服务不可用，而注册ChatGPT最终需要通过手机号短信验证才能最终完成注册。这对于没有国外手机号的小伙伴而言就很苦恼了。而解决短信验证问题，我们可以通过虚拟手机号短信平台来平替，最终帮助我们完成注册。&lt;/p&gt;

&lt;p&gt;所以，在注册ChatGPT之前。你需要准备：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以稳定科学上网的工具&lt;/li&gt;
  &lt;li&gt;一个常用的邮箱账号，建议使用Google的GMail邮箱&lt;/li&gt;
  &lt;li&gt;充值购买虚拟短信平台的SMS账号(1美元，支持支付宝)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ChatGPT官网地址：&lt;a href=&quot;https://chat.openai.com/&quot;&gt;https://chat.openai.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;虚拟短信sms平台&quot;&gt;虚拟短信SMS平台&lt;/h2&gt;

&lt;p&gt;科学上网的工具大家自行查找获取吧，这里只分享给大家虚拟短信平台SMS的流程&lt;/p&gt;

&lt;p&gt;可以访问网站：&lt;a href=&quot;https://smspva.com/&quot;&gt;https://smspva.com/&lt;/a&gt;进行充值，支持支付宝，充值1美元即可。&lt;/p&gt;

&lt;p&gt;网站如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/llm/chatgpt-register/image-20230610204526691.png&quot; alt=&quot;image-20230610204526691&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先进行充值，点击充值余额按钮，进入充值页面(选择支付宝):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/llm/chatgpt-register/image-20230610204826721.png&quot; alt=&quot;image-20230610204826721&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当你充值完成后，首先需要选择国家(建议选择&lt;strong&gt;美国&lt;/strong&gt;，成功率高一些)，选择国家后，即可以看到OpenAPI的供应商，点击即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/llm/chatgpt-register/image-20230610204633745.png&quot; alt=&quot;image-20230610204633745&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择OpenAI API选项后，在右边会出现一个手机号码，这个手机号码在你最终注册ChatGPT账号获取短信验证的时候，填入电话号码，然后等待网站显示ChatGPT发送的短信验证码即可：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/llm/chatgpt-register/20230609091824-6401445.jpg&quot; alt=&quot;image-1445&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;iphone手机下载chatgpt的app&quot;&gt;iPhone手机下载ChatGPT的APP&lt;/h2&gt;

&lt;h3 id=&quot;准备工作&quot;&gt;准备工作&lt;/h3&gt;

&lt;p&gt;在iPhone手机中，如果你要下载ChatGPT官方的APP，那么你需要以下准备工作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个美区的AppleID，注册流程可以参考知乎文章&lt;a href=&quot;https://zhuanlan.zhihu.com/p/367821925&quot;&gt;五分钟注册美区AppleID&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;在iPhone上面能够科学上网的工具&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;下载官方app&quot;&gt;下载官方App&lt;/h3&gt;

&lt;p&gt;我们在上面注册ChatGPT账号成功后，就可以在Web端成功使用ChatGPT了。&lt;/p&gt;

&lt;p&gt;如果你的手机是iPhone,那么也可以通过下载官方(请认准官方，APP Store上面太多李鬼了)提供的APP进行使用&lt;/p&gt;

&lt;p&gt;iOS地址：&lt;a href=&quot;https://apps.apple.com/app/openai-chatgpt/id6448311069&quot;&gt;https://apps.apple.com/app/openai-chatgpt/id6448311069&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/llm/chatgpt-register/image-20230610210149945.png&quot; alt=&quot;image-20230610210149945&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/llm/chatgpt-register/image-20230610210220577.png&quot; alt=&quot;image-20230610210220577&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

&lt;p&gt;好了，上面就是分享的最新ChatGPT的账号注册以及IOS下载的流程。&lt;/p&gt;

&lt;p&gt;如果你对本篇文中中的任何步骤存在疑问，可以关注下面公众号加入交流群获取帮助。&lt;/p&gt;

&lt;p&gt;关注我，获取更多开源、AI等方面的最新资讯信息&lt;/p&gt;</content><author><name>八一菜刀</name></author><category term="大模型" /><summary type="html">ChatGPT是什么？</summary></entry></feed>