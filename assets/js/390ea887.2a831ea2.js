"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[1036],{3905:(e,r,n)=>{n.d(r,{Zo:()=>d,kt:()=>u});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=t.createContext({}),c=function(e){var r=t.useContext(o),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},d=function(e){var r=c(e.components);return t.createElement(o.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},v=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),v=c(n),u=a,m=v["".concat(o,".").concat(u)]||v[u]||p[u]||i;return n?t.createElement(m,s(s({ref:r},d),{},{components:n})):t.createElement(m,s({ref:r},d))}));function u(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=v;var l={};for(var o in r)hasOwnProperty.call(r,o)&&(l[o]=r[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<i;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},17399:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=n(87462),a=(n(67294),n(3905));const i={layout:"post",title:"mybatis \u6e90\u7801\u7cfb\u5217(\u56db) \u6570\u636e\u5e93\u9a71\u52a8Driver\u52a0\u8f7d\u65b9\u5f0f",categories:"mybatis",description:"mybatis \u6e90\u7801\u7cfb\u5217",keywords:["mybatis \u6e90\u7801\u7cfb\u5217,mybatis"]},s=void 0,l={unversionedId:"mybatis/2019-05-14-mybatis-4",id:"mybatis/2019-05-14-mybatis-4",title:"mybatis \u6e90\u7801\u7cfb\u5217(\u56db) \u6570\u636e\u5e93\u9a71\u52a8Driver\u52a0\u8f7d\u65b9\u5f0f",description:"mybatis \u6e90\u7801\u7cfb\u5217",source:"@site/programmer/blog/mybatis/2019-05-14-mybatis-4.md",sourceDirName:"mybatis",slug:"/mybatis/2019-05-14-mybatis-4",permalink:"/blog/mybatis/2019-05-14-mybatis-4",draft:!1,editUrl:"https://github.com/xiaoymin/blog-ai/blob/master/programmer/blog/mybatis/2019-05-14-mybatis-4.md",tags:[],version:"current",lastUpdatedBy:"xiaoyumin",lastUpdatedAt:1686478303,formattedLastUpdatedAt:"2023\u5e746\u670811\u65e5",frontMatter:{layout:"post",title:"mybatis \u6e90\u7801\u7cfb\u5217(\u56db) \u6570\u636e\u5e93\u9a71\u52a8Driver\u52a0\u8f7d\u65b9\u5f0f",categories:"mybatis",description:"mybatis \u6e90\u7801\u7cfb\u5217",keywords:["mybatis \u6e90\u7801\u7cfb\u5217,mybatis"]},sidebar:"tutorialSidebar",previous:{title:"mybatis \u6e90\u7801\u7cfb\u5217(\u4e09) \u914d\u7f6e\u4e4b\u73af\u5883\u53d8\u91cfEnvironment",permalink:"/blog/mybatis/2019-05-13-mybatis-3"},next:{title:"mybatis \u6e90\u7801\u7cfb\u5217(\u4e94) \u6570\u636e\u6e90DataSource",permalink:"/blog/mybatis/2019-05-16-mybatis-5"}},o={},c=[],d={toc:c};function p(e){let{components:r,...i}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,i,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u4e0d\u7ba1\u662fmysql\u6216\u8005oracle\u7b49\u7b49\u6570\u636e\u5e93\u7684\u8fde\u63a5,\u5728\u6211\u4eecJava\u7a0b\u5e8f\u4e2d,\u90fd\u9700\u8981\u5c06\u76f8\u5e94\u7684\u6570\u636e\u5e93\u9a71\u52a8jar\u5305\u52a0\u5165\u5230Java\u5e94\u7528\u7a0b\u5e8f\u4e2d"),(0,a.kt)("p",null,"\u90a3\u4e48\u901a\u8fc7mybatis\u7684\u4e24\u4e2aDataSource\u6570\u636e\u6e90\u5b9e\u73b0\u65b9\u5f0f\u6765\u770b,\u6211\u4eec\u7684\u6570\u636e\u5e93\u9a71\u52a8\u662f\u5982\u4f55\u52a0\u8f7d\u7684\u5462\uff1f"),(0,a.kt)("p",null,"\u5148\u6765\u770bmybatis\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"UnpooledDataSource.java"),"\u6570\u636e\u6e90"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * @author Clinton Begin\n * @author Eduardo Macarron\n */\npublic class UnpooledDataSource implements DataSource {\n  \n  private ClassLoader driverClassLoader;\n  private Properties driverProperties;\n  private static Map<String, Driver> registeredDrivers = new ConcurrentHashMap<String, Driver>();\n\n  /***\n   * \u9a71\u52a8\u7c7b\n   */\n  private String driver;\n  /***\n   * \u6570\u636e\u5e93\u8fde\u63a5url\n   */\n  private String url;\n  //\u7528\u6237\u540d\n  private String username;\n  //\u5bc6\u7801\n  private String password;\n\n  //\u662f\u5426\u81ea\u52a8\u63d0\u4ea4\n  private Boolean autoCommit;\n  //\u9ed8\u8ba4\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b\n  private Integer defaultTransactionIsolationLevel;\n\n  static {\n    //\u52a0\u8f7d\u6570\u636e\u5e93\u9a71\u52a8\n    //\u904d\u5386\u83b7\u53d6\u4f9d\u636e\u6ce8\u518c\u7684\u9a71\u52a8\u7c7b,\u5e76\u5c06\u8be5\u9a71\u52a8\u7c7b\u5b9e\u4f8b\u52a0\u5165\u5230\u5f53\u524d\u6570\u636e\u6e90\u7684\u7f13\u5b58map\u4e2d\n    Enumeration<Driver> drivers = DriverManager.getDrivers();\n    while (drivers.hasMoreElements()) {\n      Driver driver = drivers.nextElement();\n      registeredDrivers.put(driver.getClass().getName(), driver);\n    }\n  }\n public UnpooledDataSource() {\n  }\n    //.....\n}\n")),(0,a.kt)("p",null,"\u6309\u7167mybatis\u7684\u6570\u636e\u6e90\u5b9e\u73b0\u65b9\u5f0f,\u90a3\u4e48\u6211\u4eec\u4f7f\u7528\u6570\u636e\u5e93\u7684\u65b9\u5f0f\u5982\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'//\u521b\u5efa\u6570\u636e\u6e90\u5de5\u5382\nUnpooledDataSourceFactory unpooledDataSourceFactory=new UnpooledDataSourceFactory();\nString driver="com.mysql.cj.jdbc.Driver";\nString url="jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true";\nString username="root";\nString password="123456";\n//\u8d4b\u503cproperties\nProperties properties=new Properties();\nproperties.setProperty("driver",driver);\nproperties.setProperty("url",url);\nproperties.setProperty("username",username);\nproperties.setProperty("password",password);\nunpooledDataSourceFactory.setProperties(properties);\n//\u5982\u679c\u4f7f\u7528\u7684\u662fUnpooledDataSource\u6570\u636e\u6e90,\u5219\u4ee5\u4e0aproperties\u5c5e\u6027\u8d4b\u503c\u9700\u8981\u4f7f\u7528UnpooledDataSource\u7684\u5c5e\u6027\u503c\n//\u83b7\u53d6\u6570\u636e\u6e90\nDataSource dataSource=unpooledDataSourceFactory.getDataSource();\nConnection connection=dataSource.getConnection();\nString sql="select * from user";\nPreparedStatement pstm=connection.prepareStatement(sql);\nResultSet rs=pstm.executeQuery();\nwhile (rs.next()){\n    String id=rs.getString("id");\n    int age=rs.getInt("age");\n    String name=rs.getString("name");\n    System.out.println("id:"+id+",age:"+age+",name:"+name);\n}\nrs.close();\npstm.close();\nconnection.close();\n')),(0,a.kt)("p",null,"\u8fd9\u6837\u6211\u4eec\u4f1a\u5728\u63a7\u5236\u53f0\u4e2d\u6253\u5370\u5f53\u524duser\u8868\u7684\u76f8\u5173\u4fe1\u606f,\u770b\u5230\u8fd9\u91cc,\u8fd9\u5728\u4ee5\u524d\u6211\u4f1a\u53ef\u80fd\u5230\u6b64\u4e3a\u6b62\u4e86,\u4f46\u662f\u65e2\u7136\u662f\u6e90\u7801\u7814\u7a76,\u90a3\u4e48\u5728\u9605\u8bfb\u4ee3\u7801\u7684\u65f6\u5019\u5c31\u4f1a\u4ea7\u751f\u7591\u95ee"),(0,a.kt)("p",null,"\u7591\u95ee\u70b9\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"static {\n    //\u52a0\u8f7d\u6570\u636e\u5e93\u9a71\u52a8\n    //\u904d\u5386\u83b7\u53d6\u4f9d\u636e\u6ce8\u518c\u7684\u9a71\u52a8\u7c7b,\u5e76\u5c06\u8be5\u9a71\u52a8\u7c7b\u5b9e\u4f8b\u52a0\u5165\u5230\u5f53\u524d\u6570\u636e\u6e90\u7684\u7f13\u5b58map\u4e2d\n    Enumeration<Driver> drivers = DriverManager.getDrivers();\n    while (drivers.hasMoreElements()) {\n      Driver driver = drivers.nextElement();\n      registeredDrivers.put(driver.getClass().getName(), driver);\n    }\n  }\n")),(0,a.kt)("p",null,"\u5728\u4ee5\u4e0astatic\u5757\u4e2d,\u901a\u8fc7\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"DriverManager.getDrivers()"),"\u5c31\u80fd\u5728Java\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u5f97\u5230\u6211\u4eec\u5f53\u524d\u4ee5\u53ca\u6ce8\u518c\u7684\u6570\u636e\u5e93\u9a71\u52a8Driver\u7c7b,\u90a3\u4e48\u8fd9\u4e9bDriver\u7c7b\u662f\u4f55\u65f6\u6ce8\u518c\u7684\u5462\uff1f"),(0,a.kt)("p",null,"\u6211\u4eec\u53ea\u80fd\u67e5\u770bDriverManger.getDrivers()\u65b9\u6cd5\u4e00\u63a2\u7a76\u7adf."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'@CallerSensitive\npublic static java.util.Enumeration<Driver> getDrivers() {\n    java.util.Vector<Driver> result = new java.util.Vector<>();\n\n    Class<?> callerClass = Reflection.getCallerClass();\n    //\u4eceregisteredDrivers\u65b9\u6cd5\u904d\u5386\u5f97\u5230Driver\u7684Vector\u96c6\u5408\n    // Walk through the loaded registeredDrivers.\n    for(DriverInfo aDriver : registeredDrivers) {\n        // If the caller does not have permission to load the driver then\n        // skip it.\n        if(isDriverAllowed(aDriver.driver, callerClass)) {\n            result.addElement(aDriver.driver);\n        } else {\n            println("    skipping: " + aDriver.getClass().getName());\n        }\n    }\n    return (result.elements());\n}\n')),(0,a.kt)("p",null,"\u4eceregisteredDrivers\u65b9\u6cd5\u904d\u5386\u5f97\u5230Driver\u7684Vector\u96c6\u5408\uff0c\u6240\u4ee5,\u6b64\u6bb5\u4ee3\u7801\u8bf4\u660eregisteredDrivers\u4e00\u5b9a\u662f\u5728\u67d0\u5904\u5df2\u7ecf\u521d\u59cb\u5316\u8fc7,\u6211\u4eec\u5728\u4ee3\u7801\u4e0a\u5e76\u6ca1\u6709\u5176\u4ed6\u8c03\u7528,\u6b64\u65f6\u53ea\u80fd\u662fDriverManager\u4e2d\u5b58\u5728static\u4ee3\u7801\u5757"),(0,a.kt)("p",null,"\u5148\u6765\u770b\u90e8\u5206\u4ee3\u7801\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class DriverManager {\n\n\n    // List of registered JDBC drivers\n    private final static CopyOnWriteArrayList<DriverInfo> registeredDrivers = new CopyOnWriteArrayList<>();\n    private static volatile int loginTimeout = 0;\n    private static volatile java.io.PrintWriter logWriter = null;\n    private static volatile java.io.PrintStream logStream = null;\n    // Used in println() to synchronize logWriter\n    private final static  Object logSync = new Object();\n\n    /* Prevent the DriverManager class from being instantiated. */\n    private DriverManager(){}\n\n\n    /**\n     * Load the initial JDBC drivers by checking the System property\n     * jdbc.properties and then use the {@code ServiceLoader} mechanism\n     */\n    static {\n        loadInitialDrivers();\n        println("JDBC DriverManager initialized");\n    }\n}\n')),(0,a.kt)("p",null,"\u679c\u7136,\u5728static\u5757\u4e2d,\u5b58\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"loadInitialDrivers"),"\u65b9\u6cd5,\u987e\u540d\u601d\u4e49,\u8fd9\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u9a71\u52a8\u52a0\u8f7d\u65b9\u6cd5\u4e86.\u7ee7\u7eed\u770b\u4e0b\u53bb."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private static void loadInitialDrivers() {\n    String drivers;\n    try {\n        drivers = AccessController.doPrivileged(new PrivilegedAction<String>() {\n            public String run() {\n                return System.getProperty("jdbc.drivers");\n            }\n        });\n    } catch (Exception ex) {\n        drivers = null;\n    }\n    // If the driver is packaged as a Service Provider, load it.\n    // Get all the drivers through the classloader\n    // exposed as a java.sql.Driver.class service.\n    // ServiceLoader.load() replaces the sun.misc.Providers()\n\n    AccessController.doPrivileged(new PrivilegedAction<Void>() {\n        public Void run() {\n\n            ServiceLoader<Driver> loadedDrivers = ServiceLoader.load(Driver.class);\n            Iterator<Driver> driversIterator = loadedDrivers.iterator();\n\n            /* Load these drivers, so that they can be instantiated.\n                 * It may be the case that the driver class may not be there\n                 * i.e. there may be a packaged driver with the service class\n                 * as implementation of java.sql.Driver but the actual class\n                 * may be missing. In that case a java.util.ServiceConfigurationError\n                 * will be thrown at runtime by the VM trying to locate\n                 * and load the service.\n                 *\n                 * Adding a try catch block to catch those runtime errors\n                 * if driver not available in classpath but it\'s\n                 * packaged as service and that service is there in classpath.\n                 */\n            try{\n                while(driversIterator.hasNext()) {\n                    driversIterator.next();\n                }\n            } catch(Throwable t) {\n                // Do nothing\n            }\n            return null;\n        }\n    });\n}\n')),(0,a.kt)("p",null,"\u4ece\u4ee3\u7801\u4e2d\u6211\u4eec\u770b\u5230\u901a\u8fc7ServiceLoader.load(Driver.class);"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ServiceLoader"),"\u662f\u5b9e\u73b0\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"Iterable"),"\u8fed\u4ee3\u5668\u7684\uff0c\u6765\u770b\u7c7b\u56fe"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(52554).Z,width:"472",height:"635"})),(0,a.kt)("p",null,"\u53ea\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6784\u9020\u51fd\u6570,\u6839\u636eClass\u548cClassLoader\u6765\u6784\u9020ServiceLoader"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'//\u521d\u59cb\u5316ServiceLoader\u65b9\u6cd5\npublic static <S> ServiceLoader<S> load(Class<S> service) {\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        return ServiceLoader.load(service, cl);\n} \n\npublic void reload() {\n     //\u60c5\u51b5\n     providers.clear();\n     lookupIterator = new LazyIterator(service, loader);\n }\n\nprivate ServiceLoader(Class<S> svc, ClassLoader cl) {\n    //Class \u975e\u7a7a\u6821\u9a8c,\u5982\u679c\u4e3a\u7a7a \u5219\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38.\n    service = Objects.requireNonNull(svc, "Service interface cannot be null");\n    //\u5224\u65ad\u5f53\u524dClassLoader\u662f\u5426\u4e3a\u7a7a,\u5982\u679c\u4e3a\u7a7a,\u5219\u4f7f\u7528\u7cfb\u7edf\u9ed8\u8ba4ClassLoader\n    loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n    acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n    reload();\n}\n')),(0,a.kt)("p",null,"\u5173\u4e8e",(0,a.kt)("inlineCode",{parentName:"p"},"AccessController"),"\u6d89\u53ca\u5230\u7684\u65b9\u6cd5,\u8fd9\u91cc\u4e0d\u505a\u8fc7\u591a\u7814\u7a76\u8bf4\u660e."),(0,a.kt)("p",null,"\u770b\u4e86ServiceLoader\u7684\u6e90\u7801\u7ed3\u6784\uff0c\u5728\u6765\u770b\u904d\u5386"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"try{\n    while(driversIterator.hasNext()) {\n        driversIterator.next();\n    }\n} catch(Throwable t) {\n    // Do nothing\n}\n")),(0,a.kt)("p",null,"\u6b64\u5904\u7684hasNext()\u65b9\u6cd5\u5b9e\u9645\u8c03\u7528\u7684\u662fServiceLoader\u4e2d\u7684\u5185\u90e8\u7c7b",(0,a.kt)("inlineCode",{parentName:"p"},"LazyIterator"),"\u4e2d\u7684hasNext()\u65b9\u6cd5"),(0,a.kt)("p",null,"\u6765\u770bLazyIterator\u7c7b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private class LazyIterator\n        implements Iterator<S>\n    {\n\n        Class<S> service;\n        ClassLoader loader;\n        Enumeration<URL> configs = null;\n        Iterator<String> pending = null;\n        String nextName = null;\n\n        private LazyIterator(Class<S> service, ClassLoader loader) {\n            this.service = service;\n            this.loader = loader;\n        }\n\n        private boolean hasNextService() {\n            if (nextName != null) {\n                return true;\n            }\n            if (configs == null) {\n                try {\n                    //\u83b7\u53d6\u8d44\u6e90\u8def\u5f84\u540d\u79f0\u56e0\u4e3a\u4f20\u9012\u8fc7\u6765\u7684\u7c7b\u662fjava.sql.Driver\n                    //\u6240\u4ee5\u6b64\u5904fullName\u7684\u5168\u79f0\u662f:META-INF/services/java.sql.Driver\n                    String fullName = PREFIX + service.getName();\n                    if (loader == null)\n                        configs = ClassLoader.getSystemResources(fullName);\n                    else\n                        configs = loader.getResources(fullName);\n                } catch (IOException x) {\n                    fail(service, "Error locating configuration files", x);\n                }\n            }\n            while ((pending == null) || !pending.hasNext()) {\n                if (!configs.hasMoreElements()) {\n                    return false;\n                }\n                pending = parse(service, configs.nextElement());\n            }\n            nextName = pending.next();\n            return true;\n        }\n\n        private S nextService() {\n            if (!hasNextService())\n                throw new NoSuchElementException();\n            String cn = nextName;\n            nextName = null;\n            Class<?> c = null;\n            try {\n                c = Class.forName(cn, false, loader);\n            } catch (ClassNotFoundException x) {\n                fail(service,\n                     "Provider " + cn + " not found");\n            }\n            if (!service.isAssignableFrom(c)) {\n                fail(service,\n                     "Provider " + cn  + " not a subtype");\n            }\n            try {\n                //\u4ece\u914d\u7f6e\u6587\u4ef6\u7c7b\u4e2d\u8bfb\u53d6\u5230\u9a71\u52a8\u7c7bDriver,\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u4ea7\u751fDriver\u7c7b\u7684\u5b9e\u4f8b\n                \n                S p = service.cast(c.newInstance());\n                providers.put(cn, p);\n                return p;\n            } catch (Throwable x) {\n                fail(service,\n                     "Provider " + cn + " could not be instantiated",\n                     x);\n            }\n            throw new Error();          // This cannot happen\n        }\n\n        public boolean hasNext() {\n            if (acc == null) {\n                return hasNextService();\n            } else {\n                PrivilegedAction<Boolean> action = new PrivilegedAction<Boolean>() {\n                    public Boolean run() { return hasNextService(); }\n                };\n                return AccessController.doPrivileged(action, acc);\n            }\n        }\n\n        public S next() {\n            if (acc == null) {\n                return nextService();\n            } else {\n                PrivilegedAction<S> action = new PrivilegedAction<S>() {\n                    public S run() { return nextService(); }\n                };\n                return AccessController.doPrivileged(action, acc);\n            }\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n    }\n')),(0,a.kt)("p",null,"\u901a\u8fc7hasNextService()\u65b9\u6cd5,\u6211\u4eec\u770b\u5230\u56de\u53bb\u52a0\u8f7d\u5f53\u524d\u7684\u8d44\u6e90"),(0,a.kt)("p",null,"\u83b7\u53d6\u8d44\u6e90\u8def\u5f84\u540d\u79f0\u56e0\u4e3a\u4f20\u9012\u8fc7\u6765\u7684\u7c7b\u662fjava.sql.Driver\n\u6240\u4ee5\u6b64\u5904fullName\u7684\u5168\u79f0\u662f:META-INF/services/java.sql.Driver"),(0,a.kt)("p",null,"\u6b64\u65f6\u6211\u4eec\u53bb\u67e5\u770bmariadb\u7684\u9a71\u52a8\u53camysql\u7684\u9a71\u52a8jar\u5305,\u770b\u662f\u5426\u5b58\u5728\u8be5\u6587\u4ef6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<img src="/images/mybatis/mysql.png"  width="300">\n<img src="/images/mybatis/mariadb.png" width="300">\n')),(0,a.kt)("p",null,"\u679c\u7136\u5b58\u5728,\u4ee3\u7801\u770b\u5230\u8fd9\u91cc,\u662f\u5426\u4e5f\u80fd\u6709\u4e2a\u5927\u6982\u4e86\u5462?"),(0,a.kt)("p",null,"\u770bmysql\u7684\u9a71\u52a8\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'package com.mysql.cj.jdbc;\n\nimport java.sql.SQLException;\n\n/**\n * The Java SQL framework allows for multiple database drivers. Each driver should supply a class that implements the Driver interface\n * \n * <p>\n * The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to\n * connect to the target URL.\n * \n * <p>\n * It is strongly recommended that each Driver class should be small and standalone so that the Driver class can be loaded and queried without bringing in vast\n * quantities of supporting code.\n * \n * <p>\n * When a Driver class is loaded, it should create an instance of itself and register it with the DriverManager. This means that a user can load and register a\n * driver by doing Class.forName("foo.bah.Driver")\n */\npublic class Driver extends NonRegisteringDriver implements java.sql.Driver {\n    //\n    // Register ourselves with the DriverManager\n    //\n    static {\n        try {\n            //\u6ce8\u518c\u9a71\u52a8\n            java.sql.DriverManager.registerDriver(new Driver());\n        } catch (SQLException E) {\n            throw new RuntimeException("Can\'t register driver!");\n        }\n    }\n\n    /**\n     * Construct a new driver and register it with DriverManager\n     * \n     * @throws SQLException\n     *             if a database error occurs.\n     */\n    public Driver() throws SQLException {\n        // Required for Class.forName().newInstance()\n    }\n}\n\n')),(0,a.kt)("p",null,"\u770bDriverManager.registerDriver\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static synchronized void registerDriver(java.sql.Driver driver,\n            DriverAction da)\n        throws SQLException {\n\n    /* Register the driver if it has not already been added to our list */\n    if(driver != null) {\n        //registeredDrivers\n        registeredDrivers.addIfAbsent(new DriverInfo(driver, da));\n    } else {\n        // This is for compatibility with the original DriverManager\n        throw new NullPointerException();\n    }\n\n    println("registerDriver: " + driver);\n\n}\n')),(0,a.kt)("p",null,"registeredDrivers\u96c6\u5408\u5728\u6b64\u5904\u5f97\u5230\u521d\u59cb\u5316"),(0,a.kt)("p",null,"\u6211\u4eec\u56de\u8fc7\u5934\u6765\u518d\u770bLazyIterator\u8fed\u4ee3\u5668\u4e2d\u7684\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'private S nextService() {\n    if (!hasNextService())\n        throw new NoSuchElementException();\n    String cn = nextName;\n    nextName = null;\n    Class<?> c = null;\n    try {\n        c = Class.forName(cn, false, loader);\n    } catch (ClassNotFoundException x) {\n        fail(service,\n             "Provider " + cn + " not found");\n    }\n    if (!service.isAssignableFrom(c)) {\n        fail(service,\n             "Provider " + cn  + " not a subtype");\n    }\n    try {\n        //\u4ece\u914d\u7f6e\u6587\u4ef6\u7c7b\u4e2d\u8bfb\u53d6\u5230\u9a71\u52a8\u7c7bDriver,\u901a\u8fc7\u53cd\u5c04\u8c03\u7528\u4ea7\u751fDriver\u7c7b\u7684\u5b9e\u4f8b\n\n        S p = service.cast(c.newInstance());\n        providers.put(cn, p);\n        return p;\n    } catch (Throwable x) {\n        fail(service,\n             "Provider " + cn + " could not be instantiated",\n             x);\n    }\n    throw new Error();          // This cannot happen\n}\n')),(0,a.kt)("p",null,"\u4ece\u914d\u7f6e\u6587\u4ef6\u7c7b\u4e2d\u8bfb\u53d6\u5230\u9a71\u52a8\u7c7bDriver,\u901a\u8fc7Class.forName\u65b9\u6cd5\u5c06\u8be5\u7c7b\u52a0\u8f7d\u5230JVM\u4e2d,\u6b64\u65f6\u4f1a\u8c03\u7528\u6267\u884cDriver\u7c7b\u4e2d\u7684static\u65b9\u6cd5\u5757,\u5c06Driver\u7c7b\u9a71\u52a8\u6ce8\u518c\u5230DriverManager\u4e2d\u3002\u6574\u4e2a\u8fc7\u7a0b\u5230\u6b64\u5b8c\u7ed3\u3002"))}p.isMDXComponent=!0},52554:(e,r,n)=>{n.d(r,{Z:()=>t});const t=n.p+"assets/images/ServiceLoader-5ba4373f6010a37d41a3ff5be9a0d410.png"}}]);