"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5596],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),s=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return i.createElement(c.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,m=p["".concat(c,".").concat(d)]||p[d]||h[d]||o;return t?i.createElement(m,r(r({ref:n},u),{},{components:t})):i.createElement(m,r({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},75758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=t(87462),a=(t(67294),t(3905));const o={layout:"post",title:"mybatis \u6e90\u7801\u7cfb\u5217(\u516b) Java\u57fa\u7840\u4e4bwait()\u3001notify()\u3001notifyAll()\u65b9\u6cd5",categories:"mybatis",description:"mybatis \u6e90\u7801\u7cfb\u5217(\u516b) Java\u57fa\u7840\u4e4bwait()\u3001notify()\u3001notifyAll()\u65b9\u6cd5",keywords:["mybatis \u6e90\u7801\u7cfb\u5217,mybatis,\u5e76\u53d1"]},r=void 0,l={unversionedId:"mybatis/2019-05-19-mybatis-8",id:"mybatis/2019-05-19-mybatis-8",title:"mybatis \u6e90\u7801\u7cfb\u5217(\u516b) Java\u57fa\u7840\u4e4bwait()\u3001notify()\u3001notifyAll()\u65b9\u6cd5",description:"mybatis \u6e90\u7801\u7cfb\u5217(\u516b) Java\u57fa\u7840\u4e4bwait()\u3001notify()\u3001notifyAll()\u65b9\u6cd5",source:"@site/programmer/blog/mybatis/2019-05-19-mybatis-8.md",sourceDirName:"mybatis",slug:"/mybatis/2019-05-19-mybatis-8",permalink:"/blog/mybatis/2019-05-19-mybatis-8",draft:!1,editUrl:"https://github.com/xiaoymin/blog-ai/blob/master/programmer/blog/mybatis/2019-05-19-mybatis-8.md",tags:[],version:"current",lastUpdatedBy:"xiaoyumin",lastUpdatedAt:1686478303,formattedLastUpdatedAt:"2023\u5e746\u670811\u65e5",frontMatter:{layout:"post",title:"mybatis \u6e90\u7801\u7cfb\u5217(\u516b) Java\u57fa\u7840\u4e4bwait()\u3001notify()\u3001notifyAll()\u65b9\u6cd5",categories:"mybatis",description:"mybatis \u6e90\u7801\u7cfb\u5217(\u516b) Java\u57fa\u7840\u4e4bwait()\u3001notify()\u3001notifyAll()\u65b9\u6cd5",keywords:["mybatis \u6e90\u7801\u7cfb\u5217,mybatis,\u5e76\u53d1"]},sidebar:"tutorialSidebar",previous:{title:"mybatis \u6e90\u7801\u7cfb\u5217(\u4e03) Java\u57fa\u7840\u4e4b\u6570\u636e\u5e93\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b",permalink:"/blog/mybatis/2019-05-18-mybatis-7"},next:{title:"\u524d\u7aef\u672c\u5730nginx\u53cd\u5411\u4ee3\u7406\u8bf4\u660e",permalink:"/blog/operate/2016-11-15-nginx-front-intruduce"}},c={},s=[],u={toc:s};function h(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u5728\u7814\u7a76mybatis\u7684\u8fde\u63a5\u6c60\u6570\u636e\u6e90\u6e90\u7801\u65f6,\u6211\u4eec\u770b\u5230\u4e86wait()\u3001notifyAll()\u65b9\u6cd5\u7684\u4f7f\u7528,\u5de5\u4f5c\u4e2d\u56e0\u4e3a\u5f88\u5c11\u4f7f\u7528\u5230\u8fd9\u7c7b\u65b9\u6cd5\u7684\u8c03\u7528,\u6240\u4ee5\uff0c\u5176\u4e2d\u6982\u5ff5\u4e5f\u6709\u4e9b\u6a21\u7cca\u4e86,\u5199\u4e00\u904d\u535a\u5ba2\u8bb0\u5f55\u4e00\u4e0b."),(0,a.kt)("p",null,"\u5728\u8bfb\u53d6mybatis\u63d0\u4f9b\u7684PooledDataSource\u6e90\u7801\u4e2d,\u83b7\u53d6PooledConnection\u5bf9\u8c61\u65f6\u5982\u679c\u6700\u5927\u6d3b\u52a8\u8fde\u63a5\u6570\u8fbe\u5230\u4e0a\u9650\u540e,\u5219\u8c03\u7528wait()\u65b9\u6cd5\u7b49\u5f85,\u5f53\u8c03\u7528close\u5173\u95ed\u8fde\u63a5\u65f6,\u518d\u8c03\u7528notify\u65b9\u6cd5\u5524\u8d77\u7b49\u5f85\u7684\u7ebf\u7a0b."),(0,a.kt)("p",null,"\u5148\u6765\u770bjdk\u4e2d\u7684\u6ce8\u91ca"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n     * Causes the current thread to wait until another thread invokes the\n     * {@link java.lang.Object#notify()} method or the\n     * {@link java.lang.Object#notifyAll()} method for this object.\n     * In other words, this method behaves exactly as if it simply\n     * performs the call {@code wait(0)}.\n     * <p>\n     * The current thread must own this object's monitor. The thread\n     * releases ownership of this monitor and waits until another thread\n     * notifies threads waiting on this object's monitor to wake up\n     * either through a call to the {@code notify} method or the\n     * {@code notifyAll} method. The thread then waits until it can\n     * re-obtain ownership of the monitor and resumes execution.\n     * <p>\n     * As in the one argument version, interrupts and spurious wakeups are\n     * possible, and this method should always be used in a loop:\n     * <pre>\n     *     synchronized (obj) {\n     *         while (&lt;condition does not hold&gt;)\n     *             obj.wait();\n     *         ... // Perform action appropriate to condition\n     *     }\n     * </pre>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of the object's monitor.\n     * @throws  InterruptedException if any thread interrupted the\n     *             current thread before or while the current thread\n     *             was waiting for a notification.  The <i>interrupted\n     *             status</i> of the current thread is cleared when\n     *             this exception is thrown.\n     * @see        java.lang.Object#notify()\n     * @see        java.lang.Object#notifyAll()\n     */\npublic final void wait() throws InterruptedException {\n    wait(0);\n}\n/**\n     * Wakes up a single thread that is waiting on this object's\n     * monitor. If any threads are waiting on this object, one of them\n     * is chosen to be awakened. The choice is arbitrary and occurs at\n     * the discretion of the implementation. A thread waits on an object's\n     * monitor by calling one of the {@code wait} methods.\n     * <p>\n     * The awakened thread will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened thread will\n     * compete in the usual manner with any other threads that might be\n     * actively competing to synchronize on this object; for example, the\n     * awakened thread enjoys no reliable privilege or disadvantage in being\n     * the next thread to lock this object.\n     * <p>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. A thread becomes the owner of the\n     * object's monitor in one of three ways:\n     * <ul>\n     * <li>By executing a synchronized instance method of that object.\n     * <li>By executing the body of a {@code synchronized} statement\n     *     that synchronizes on the object.\n     * <li>For objects of type {@code Class,} by executing a\n     *     synchronized static method of that class.\n     * </ul>\n     * <p>\n     * Only one thread at a time can own an object's monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @see        java.lang.Object#notifyAll()\n     * @see        java.lang.Object#wait()\n     */\npublic final native void notify();\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u901a\u8fc7\u67e5\u770bJDK\u7684\u6ce8\u91ca\u65b9\u6cd5,\u6211\u4eec\u5e94\u8be5\u77e5\u9053"),"\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u4e0d\u7ba1\u662fwait\u65b9\u6cd5\u6216\u8005notify\u3001notifyAll,\u8c03\u7528\u65b9\u6cd5\u5fc5\u987b\u5728synchronized\u540c\u6b65\u4ee3\u7801\u5757\u4e2d,\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u7ebf\u7a0b\u5fc5\u987b\u62e5\u6709\u5bf9\u8c61\u7684\u76d1\u89c6\u5668,\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u9632\u6b62\u7ebf\u7a0b\u4fe1\u53f7\u4e22\u5931,\u5426\u5219\u4f1a\u629b\u51faIllegalMonitorStateException\u5f02\u5e38\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u8c03\u7528wait()\u65b9\u6cd5\u524d\u7684\u68c0\u67e5\u64cd\u4f5c\u5fc5\u987b\u4f7f\u7528while\u5faa\u73af\uff0c\u6709\u65f6\u5728\u6ca1\u6709\u8c03\u7528notify()\u65b9\u6cd5\u7684\u60c5\u51b5\u4e0b,\u7ebf\u7a0b\u4f1a\u88ab\u91cd\u65b0\u6fc0\u6d3b\u7b49\u5f85\uff0c\u4f7f\u7528if\u4f1a\u9020\u6210\u865a\u5047\u5524\u9192\u7684\u95ee\u9898\uff0c\u800c\u4f7f\u7528while\u5faa\u73af\u53ef\u4ee5\u786e\u4fdd\u6761\u4ef6\u88ab\u68c0\u67e5\u5230"),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u662f\u4e00\u4e2a\u7ebf\u7a0b\u7684\u8bdd,notify\u548cnotifyAll\u6548\u679c\u4e00\u6837,\u5982\u679c\u662f\u591a\u4e2a\u7ebf\u7a0b\u7684\u60c5\u51b5\u4e0b,notify\u53ea\u4f1a\u968f\u673a\u5524\u9192\u5176\u4e2d\u4e00\u4e2a\u7ebf\u7a0b,\u800cnotifyAll\u4f1a\u5524\u9192\u6240\u6709\u7ebf\u7a0b,\u5524\u9192\u540e\u7684\u6240\u6709\u7ebf\u7a0b\u4f1a\u7ade\u4e89\u83b7\u53d6\u5bf9\u8c61\u9501."),(0,a.kt)("li",{parentName:"ul"},"\u53e6\u5916,\u5c3d\u91cf\u907f\u514d\u5728\u540c\u6b65\u5757\u4e2d\u83b7\u53d6\u9501,\u6216\u8005\u8c03\u7528\u5916\u90e8\u65b9\u6cd5(\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u53d1\u751f\u4ec0\u4e48),\u5c3d\u91cf\u907f\u514d\u9020\u6210\u6b7b\u9501"),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u4f60\u4e0d\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\u7684\u8bdd,\u6216\u8005\u5bf9notify\u4e0d\u662f\u5f88\u6e05\u695a,\u8bf7\u4f7f\u7528notifyAll\u4ee3\u66ff")),(0,a.kt)("p",null,"\u4e3a\u4e86\u8fbe\u5230\u4e0a\u9762\u7684\u6548\u679c,\u53ef\u4ee5\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u963b\u585e\u961f\u5217\u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"p"},"BlockingQueue")),(0,a.kt)("p",null,"\u9996\u5148\u6211\u4eec\u5e94\u8be5\u62bd\u53d6\u76f8\u5e94\u7684\u6761\u4ef6\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u961f\u5217\u6709\u5927\u5c0f,\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u7684\u961f\u91cc\u4e2d\u5982\u679c\u5df2\u6ee1,\u5219\u7ebf\u7a0b\u5fc5\u987b\u7b49\u5f85"),(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u961f\u91cc\u5df2\u7ecf\u6d88\u8d39,\u5219\u9700\u8981\u5524\u9192\u7b49\u5f85\u7684\u7ebf\u7a0b,\u53ef\u4ee5\u91cd\u65b0\u52a0\u5165\u6570\u636e")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"BlockingQueue.java")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'/***\n *\n * @since:mybatis-advance 1.0\n * @author <a href="mailto:xiaoymin@foxmail.com">xiaoymin@foxmail.com</a> \n * 2019/05/20 21:41\n */\npublic class BlockingQueue<T> {\n\n    /**\n     * \u5bb9\u91cf\n     */\n    private int capacity;\n\n\n    private Queue<T> queue=new LinkedList<>();\n\n    public BlockingQueue(int capacity) {\n        this.capacity = capacity;\n    }\n\n    /***\n     * \u6dfb\u52a0\u5143\u7d20\n     * @param t\n     */\n    public void add(T t){\n        synchronized (this){\n            //\u5982\u679c\u961f\u5217\u5df2\u6ee1,wait\u7b49\u5f85\n            while (queue.size()==capacity){\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            queue.add(t);\n            //\u5df2\u7ecf\u6dfb\u52a0\u5143\u7d20,\u5524\u9192\u6d88\u8d39\u7ebf\u7a0b\n            notifyAll();\n        }\n    }\n\n    /***\n     * \u83b7\u53d6\u5143\u7d20\n     * @return\n     */\n    public T get(){\n        T obj=null;\n        //\u83b7\u53d6\u5bf9\u8c61\u9501\n        synchronized (this){\n            //\u5982\u679c\u5f53\u524d\u961f\u5217\u4e2d\u6ca1\u6709\u6570\u636e,\u5219\u7b49\u5f85\n            while (queue.isEmpty()){\n                try {\n                    wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            obj=queue.remove();\n            //\u83b7\u53d6\u5f97\u5230obj,\u5524\u9192\u5176\u4ed6\u7ebf\u7a0b\n            notifyAll();\n            return obj;\n        }\n    }\n}\n')),(0,a.kt)("p",null,"\u6b64\u65f6,\u5982\u679c\u6211\u4eec\u7528\u4e24\u4e2a\u7ebf\u7a0b\u6765\u6d4b\u8bd5\u4e00\u4e0b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) {\n        BlockingQueue<String> blockingQueue=new BlockingQueue<>(10);\n\n        Thread t=new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //provider\n                while (true){\n                    blockingQueue.add("test");\n                }\n            }\n        });\n\n        t.start();\n\n        Thread tc=new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true){\n                    System.out.println("\u83b7\u53d6\u7684\u6570\u636e:"+blockingQueue.get());\n                }\n            }\n        });\n        tc.start();\n    }\n')),(0,a.kt)("p",null,"tc\u7ebf\u7a0b\u4f1a\u4e00\u76f4\u8f93\u51fa,\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u7684add\u6570\u636e\u548cget\u6570\u636e\u90fd\u662f\u4e00\u5bf9\u4e00\u7684\uff0c\u800c\u6211\u4eec\u7684\u5bb9\u91cf\u662f10\uff0c\u8fd9\u4e0d\u4f1a\u9020\u6210\u963b\u585e,\u5982\u679c\u6211\u4eec\u6709\u591a\u4e2a\u751f\u6210\u8005,\u800c\u53ea\u6709\u4e00\u4e2a\u6d88\u8d39\u8005\u5462,\u6b64\u65f6\u6211\u4eec\u6539\u4e00\u4e0b\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public static void main(String[] args) {\n    BlockingQueue<String> blockingQueue=new BlockingQueue<>(10);\n    for (int i=0;i<10;i++){\n        Provider p=new Provider(blockingQueue);\n        p.setName("\u7ebf\u7a0b"+i);\n        p.start();\n    }\n\n    //\u521b\u5efa2\u4e2a\u6d88\u8d39\u7ebf\u7a0b\n\n    for (int i=0;i<2;i++){\n        Consumer c=new Consumer(blockingQueue);\n        c.setName("\u6d88\u8d39\u7ebf\u7a0b"+i);\n        c.start();\n    }\n}\n\n\nprivate static class Provider extends Thread{\n\n\n    private final BlockingQueue<String> blockingQueue;\n\n    public Provider(BlockingQueue<String> blockingQueue) {\n        this.blockingQueue=blockingQueue;\n    }\n    @Override\n    public void run() {\n        while (true){\n            blockingQueue.add(Thread.currentThread().getName()+"--\u4ea7\u751f\u7684\u6570\u636e");\n        }\n    }\n}\n\n\nprivate static class Consumer extends Thread{\n\n    private final BlockingQueue<String> blockingQueue;\n\n    public Consumer(BlockingQueue<String> blockingQueue) {\n        this.blockingQueue = blockingQueue;\n    }\n\n    public void run(){\n        while (true){\n            System.out.println(Thread.currentThread().getName()+"---------\x3e"+blockingQueue.get());\n        }\n    }\n}\n')))}h.isMDXComponent=!0}}]);